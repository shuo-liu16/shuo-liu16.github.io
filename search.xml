<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件工程常用图表类型介绍</title>
      <link href="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
      <url>/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>在软件工程中，各类图表用于不同阶段和目的的分析与设计。以下是按逻辑分类的详细介绍，帮助理解它们的用途和区别：</p><hr><h3 id="一、结构化分析与设计（传统方法）"><a href="#一、结构化分析与设计（传统方法）" class="headerlink" title="一、结构化分析与设计（传统方法）"></a><strong>一、结构化分析与设计（传统方法）</strong></h3><h4 id="1-数据流图（Data-Flow-Diagram-DFD）"><a href="#1-数据流图（Data-Flow-Diagram-DFD）" class="headerlink" title="1. 数据流图（Data Flow Diagram, DFD）"></a>1. <strong>数据流图（Data Flow Diagram, DFD）</strong></h4><ul><li><strong>用途</strong>：描述系统中数据的流动、处理过程和存储，适用于需求分析阶段。</li><li><strong>特点</strong>：强调“数据如何流动”，包含外部实体、处理过程、数据存储和数据流箭头。</li><li><strong>场景</strong>：分析银行系统的存款流程（如用户输入数据→验证→存储到数据库）。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image1.png" width="600"><h4 id="2-程序流程图（Flowchart）"><a href="#2-程序流程图（Flowchart）" class="headerlink" title="2. 程序流程图（Flowchart）"></a>2. <strong>程序流程图（Flowchart）</strong></h4><ul><li><strong>用途</strong>：展示程序执行的具体步骤和逻辑控制流。</li><li><strong>特点</strong>：使用标准符号（如菱形表示判断、矩形表示处理），关注线性流程。</li><li><strong>场景</strong>：描述算法逻辑（如登录验证的步骤：输入→验证→成功&#x2F;失败）。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image2.png" width="600"><h4 id="3-软件结构图（Structure-Chart）"><a href="#3-软件结构图（Structure-Chart）" class="headerlink" title="3. 软件结构图（Structure Chart）"></a>3. <strong>软件结构图（Structure Chart）</strong></h4><ul><li><strong>用途</strong>：展示系统模块的层次结构和调用关系，属于架构设计阶段。</li><li><strong>特点</strong>：体现模块间的调用、数据传递和控制关系（如主模块调用子模块）。</li><li><strong>场景</strong>：设计电商系统的模块结构（订单模块调用支付模块、库存模块）。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image3.png" width="600"><h4 id="4-高层功能模块图（Functional-Module-Diagram）"><a href="#4-高层功能模块图（Functional-Module-Diagram）" class="headerlink" title="4. 高层功能模块图（Functional Module Diagram）"></a>4. <strong>高层功能模块图（Functional Module Diagram）</strong></h4><ul><li><strong>用途</strong>：划分系统的主要功能模块及其关系，用于需求或概要设计。</li><li><strong>特点</strong>：高层次的模块划分（如用户管理、订单管理），不涉及细节实现。</li><li><strong>场景</strong>：定义ERP系统的核心功能模块（财务、HR、采购等）。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image4.png" width="600"><hr><h3 id="二、面向对象分析与设计（UML-图表）"><a href="#二、面向对象分析与设计（UML-图表）" class="headerlink" title="二、面向对象分析与设计（UML 图表）"></a><strong>二、面向对象分析与设计（UML 图表）</strong></h3><h4 id="1-用例图（Use-Case-Diagram）"><a href="#1-用例图（Use-Case-Diagram）" class="headerlink" title="1. 用例图（Use Case Diagram）"></a>1. <strong>用例图（Use Case Diagram）</strong></h4><ul><li><strong>用途</strong>：描述系统功能需求与外部参与者的交互。</li><li><strong>特点</strong>：包含参与者（Actor）、用例（Use Case）及其关系（扩展&#x2F;包含）。</li><li><strong>场景</strong>：电商系统的用户注册、下单、支付等用例。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image5.png" width="600"><h4 id="2-类图（Class-Diagram）"><a href="#2-类图（Class-Diagram）" class="headerlink" title="2. 类图（Class Diagram）"></a>2. <strong>类图（Class Diagram）</strong></h4><ul><li><strong>用途</strong>：描述系统的静态结构，包括类、属性、方法及关系（继承、关联等）。</li><li><strong>特点</strong>：核心的面向对象设计工具，体现代码结构。</li><li><strong>场景</strong>：设计“订单”类与“用户”“商品”类的关联关系。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image6.png" width="600"><h4 id="3-状态图（State-Diagram）"><a href="#3-状态图（State-Diagram）" class="headerlink" title="3. 状态图（State Diagram）"></a>3. <strong>状态图（State Diagram）</strong></h4><ul><li><strong>用途</strong>：展示对象在其生命周期内的状态变化及触发事件。</li><li><strong>特点</strong>：状态（State）、转移（Transition）、事件（Event）和动作（Action）。</li><li><strong>场景</strong>：订单状态变化（新建→已支付→发货→完成）。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image7.png" width="600"><h4 id="4-活动图（Activity-Diagram）"><a href="#4-活动图（Activity-Diagram）" class="headerlink" title="4. 活动图（Activity Diagram）"></a>4. <strong>活动图（Activity Diagram）</strong></h4><ul><li><strong>用途</strong>：描述业务流程或操作的活动流程，支持并行和分支。</li><li><strong>特点</strong>：类似流程图，但支持泳道（Swimlane）和并发控制。</li><li><strong>场景</strong>：订单处理流程（并行执行库存扣减与支付操作）。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image8.png" width="600"><h4 id="5-时序图-顺序图-序列图（Sequence-Diagram）"><a href="#5-时序图-顺序图-序列图（Sequence-Diagram）" class="headerlink" title="5. 时序图&#x2F;顺序图&#x2F;序列图（Sequence Diagram）"></a>5. <strong>时序图&#x2F;顺序图&#x2F;序列图（Sequence Diagram）</strong></h4><ul><li><strong>用途</strong>：强调对象间消息传递的时间顺序，用于详细设计。</li><li><strong>特点</strong>：纵轴为时间，横轴为对象，展示交互的时序性。</li><li><strong>场景</strong>：用户登录时，前端→验证服务→数据库的调用顺序。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image9.png" width="600"><h4 id="6-协作图（Communication-Diagram，原协作图）"><a href="#6-协作图（Communication-Diagram，原协作图）" class="headerlink" title="6. 协作图（Communication Diagram，原协作图）"></a>6. <strong>协作图（Communication Diagram，原协作图）</strong></h4><ul><li><strong>用途</strong>：展示对象间的协作关系，强调结构和消息顺序。</li><li><strong>特点</strong>：以对象为中心，用编号表示消息顺序。</li><li><strong>场景</strong>：分析订单处理中各对象的协作（如订单、库存、支付对象）。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image10.png" width="600"><h4 id="7-包图（Package-Diagram）"><a href="#7-包图（Package-Diagram）" class="headerlink" title="7. 包图（Package Diagram）"></a>7. <strong>包图（Package Diagram）</strong></h4><ul><li><strong>用途</strong>：组织代码或模型的逻辑结构，管理模块依赖。</li><li><strong>特点</strong>：类似文件夹的层次结构，展示包之间的依赖关系。</li><li><strong>场景</strong>：划分系统为“用户界面包”“业务逻辑包”“数据访问包”。</li></ul><img src="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E7%94%A8%E5%9B%BE%E8%A1%A8%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/image11.png" width="600"><hr><h3 id="三、对比与总结"><a href="#三、对比与总结" class="headerlink" title="三、对比与总结"></a><strong>三、对比与总结</strong></h3><table><thead><tr><th><strong>图表类型</strong></th><th><strong>核心关注点</strong></th><th><strong>典型阶段</strong></th><th><strong>方法论</strong></th></tr></thead><tbody><tr><td>数据流图</td><td>数据流动与处理</td><td>需求分析</td><td>结构化分析</td></tr><tr><td>软件结构图</td><td>模块层次与调用关系</td><td>架构设计</td><td>结构化设计</td></tr><tr><td>用例图</td><td>功能需求与参与者交互</td><td>需求分析</td><td>UML&#x2F;面向对象</td></tr><tr><td>类图</td><td>静态类结构</td><td>详细设计</td><td>UML&#x2F;面向对象</td></tr><tr><td>序列图 vs 协作图</td><td>时间顺序 vs 结构协作</td><td>详细设计</td><td>UML&#x2F;面向对象</td></tr><tr><td>活动图 vs 流程图</td><td>并行流程 vs 线性控制流</td><td>业务流程建模</td><td>UML&#x2F;通用</td></tr></tbody></table><p><strong>关键区别</strong>：</p><ul><li><strong>数据流图 vs 活动图</strong>：前者关注数据，后者关注活动和流程。</li><li><strong>状态图 vs 活动图</strong>：前者是对象状态变化，后者是业务流程。</li><li><strong>序列图 vs 协作图</strong>：前者强调时间顺序，后者强调对象协作结构。</li></ul><p>通过合理选择图表，可以更清晰地表达系统不同层面的设计，提升团队沟通与开发效率。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程常见简答题</title>
      <link href="/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E8%A7%81%E7%AE%80%E7%AD%94%E9%A2%98/"/>
      <url>/2025/05/11/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%B8%E8%A7%81%E7%AE%80%E7%AD%94%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="软件工程基础"><a href="#软件工程基础" class="headerlink" title="软件工程基础"></a><strong>软件工程基础</strong></h2><h3 id="1-软件工程的意义（6分）"><a href="#1-软件工程的意义（6分）" class="headerlink" title="1. 软件工程的意义（6分）"></a>1. <strong>软件工程的意义（6分）</strong></h3><ul><li><strong>目标驱动</strong>：通过系统化方法（如流程规范、工具链）解决软件开发中的复杂度、成本和质量问题。  </li><li><strong>核心价值</strong>：  <ul><li>提升软件可靠性（减少缺陷）、可维护性（易于修改）和可扩展性（适应需求变化）。  </li><li>优化资源分配（人力、时间、成本），避免项目失控。  </li><li>通过标准化流程（如CMMI、敏捷）提高团队协作效率。</li></ul></li><li><strong>行业意义</strong>：推动软件从“手工艺”向“工业化”转变，支撑大规模复杂系统（如操作系统、云计算平台）的开发。</li></ul><h3 id="2-软件工程三要素的内容（6分）"><a href="#2-软件工程三要素的内容（6分）" class="headerlink" title="2. 软件工程三要素的内容（6分）"></a>2. <strong>软件工程三要素的内容（6分）</strong></h3><ul><li><strong>工具</strong>：支持开发全周期的软硬件设施，如IDE（Visual Studio）、版本控制工具（Git）、自动化测试框架（Selenium）。  </li><li><strong>方法</strong>：技术手段与理论，如结构化编程、面向对象设计、敏捷开发方法论（Scrum）。  </li><li><strong>过程</strong>：开发活动的组织与管理模型，例如：  <ul><li>瀑布模型（阶段严格递进）。  </li><li>迭代模型（增量交付）。  </li><li>DevOps（开发与运维协同）。</li></ul></li></ul><h3 id="3-软件工程三要素的作用（6分）"><a href="#3-软件工程三要素的作用（6分）" class="headerlink" title="3. 软件工程三要素的作用（6分）"></a>3. <strong>软件工程三要素的作用（6分）</strong></h3><ul><li><strong>工具</strong>：  <ul><li>自动化重复任务（如编译、测试），提升效率。  </li><li>提供可视化支持（如UML工具生成代码框架）。</li></ul></li><li><strong>方法</strong>：  <ul><li>规范技术实现（如MVC分层架构明确职责）。  </li><li>解决特定问题（如TDD通过测试驱动代码设计）。</li></ul></li><li><strong>过程</strong>：  <ul><li>控制风险（如迭代模型早期暴露问题）。  </li><li>协调跨角色协作（如需求分析师与开发者的工作衔接）。</li></ul></li></ul><h3 id="4-软件工程理论与方法的意义（6分）"><a href="#4-软件工程理论与方法的意义（6分）" class="headerlink" title="4. 软件工程理论与方法的意义（6分）"></a>4. <strong>软件工程理论与方法的意义（6分）</strong></h3><ul><li><strong>理论意义</strong>：  <ul><li>提供抽象模型（如状态机、数据流图）降低系统复杂度。  </li><li>定义质量度量标准（如代码圈复杂度、耦合度）。</li></ul></li><li><strong>实践意义</strong>：  <ul><li>避免“个人英雄主义”开发，转向团队协作。  </li><li>通过可复用组件（如设计模式）减少重复劳动。</li></ul></li><li><strong>案例</strong>：  <ul><li>敏捷方法通过短周期迭代应对需求变更。  </li><li>版本控制工具（Git）解决代码冲突与历史追溯问题。</li></ul></li></ul><hr><h2 id="软件危机"><a href="#软件危机" class="headerlink" title="软件危机"></a><strong>软件危机</strong></h2><h3 id="5-软件危机的表现（6分）"><a href="#5-软件危机的表现（6分）" class="headerlink" title="5. 软件危机的表现（6分）"></a>5. <strong>软件危机的表现（6分）</strong></h3><ul><li><strong>交付问题</strong>：项目长期拖延（如丹佛机场行李系统延期3年）、预算严重超支。  </li><li><strong>质量问题</strong>：软件漏洞频发（如Therac-25放射治疗机致命错误）。  </li><li><strong>维护困难</strong>：代码臃肿（如“意大利面条代码”），修改成本高昂。  </li><li><strong>用户不满</strong>：最终产品与需求严重偏离（如悉尼歌剧院成本超支14倍）。</li></ul><h3 id="6-软件危机的成因（6分）"><a href="#6-软件危机的成因（6分）" class="headerlink" title="6. 软件危机的成因（6分）"></a>6. <strong>软件危机的成因（6分）</strong></h3><ul><li><strong>技术层面</strong>：  <ul><li>软件复杂度指数增长，缺乏有效管理手段（如早期无模块化设计）。  </li><li>硬件进步速度远超软件开发方法（20世纪60年代矛盾激化）。</li></ul></li><li><strong>管理层面</strong>：  <ul><li>需求分析缺失（如用户未明确核心需求）。  </li><li>缺乏系统化开发流程（如无版本控制、无测试阶段）。</li></ul></li><li><strong>认知层面</strong>：  <ul><li>低估软件工程难度（如认为“编码即开发全部”）。</li></ul></li></ul><hr><h2 id="需求分析与面向对象分析"><a href="#需求分析与面向对象分析" class="headerlink" title="需求分析与面向对象分析"></a><strong>需求分析与面向对象分析</strong></h2><h3 id="7-需求分析的作用（6分）"><a href="#7-需求分析的作用（6分）" class="headerlink" title="7. 需求分析的作用（6分）"></a>7. <strong>需求分析的作用（6分）</strong></h3><ul><li><strong>桥梁角色</strong>：将模糊的用户需求转化为可执行的技术规格（如“快速响应”需明确为“接口延迟&lt;500ms”）。  </li><li><strong>风险控制</strong>：  <ul><li>早期发现需求矛盾（如用户同时要求高安全性与低成本）。  </li><li>通过原型验证（如Axure制作交互模型）减少后期变更成本。</li></ul></li><li><strong>文档输出</strong>：形成《需求规格说明书》作为开发基线（避免口头约定导致的纠纷）。</li></ul><h3 id="8-面向对象需求分析步骤与UML应用（6分）"><a href="#8-面向对象需求分析步骤与UML应用（6分）" class="headerlink" title="8. 面向对象需求分析步骤与UML应用（6分）"></a>8. <strong>面向对象需求分析步骤与UML应用（6分）</strong></h3><ul><li><strong>步骤详解</strong>：  <ol><li><strong>识别参与者与用例</strong>：明确系统边界（如电商系统的“用户”“管理员”角色）。  </li><li><strong>绘制用例图</strong>：描述功能范围（如“用户”可执行“下单”“支付”）。  </li><li><strong>领域建模（类图）</strong>：定义对象关系（如“订单”关联“商品”“用户”）。  </li><li><strong>动态行为建模</strong>：  <ul><li>活动图（描述业务流程，如退货审批流程）。  </li><li>时序图（展示对象间消息传递，如支付过程中与银行系统的交互）。</li></ul></li><li><strong>状态图</strong>：描述对象生命周期（如订单状态从“待支付”到“已完成”）。</li></ol></li><li><strong>UML工具实践</strong>：  <ul><li>使用StarUML或Enterprise Architect生成可迭代的模型。  </li><li>通过用例图驱动后续设计与测试用例编写。</li></ul></li></ul><hr><h2 id="软件设计与开发任务"><a href="#软件设计与开发任务" class="headerlink" title="软件设计与开发任务"></a><strong>软件设计与开发任务</strong></h2><h3 id="9-软件设计阶段过程（6分）"><a href="#9-软件设计阶段过程（6分）" class="headerlink" title="9. 软件设计阶段过程（6分）"></a>9. <strong>软件设计阶段过程（6分）</strong></h3><ul><li><strong>输入</strong>：需求规格说明书、可行性分析报告。  </li><li><strong>核心步骤</strong>：  <ol><li><strong>架构设计</strong>：选择整体模式（如微服务架构 vs 单体架构）。  </li><li><strong>模块划分</strong>：按功能&#x2F;业务逻辑拆分（如电商系统的“订单模块”“库存模块”）。  </li><li><strong>接口设计</strong>：定义模块间通信协议（如REST API规范）。  </li><li><strong>数据设计</strong>：数据库ER模型、缓存策略设计。  </li><li><strong>设计评审</strong>：组织会议验证设计的完整性与可扩展性。</li></ol></li></ul><h3 id="10-概要设计任务（6分）"><a href="#10-概要设计任务（6分）" class="headerlink" title="10. 概要设计任务（6分）"></a>10. <strong>概要设计任务（6分）</strong></h3><pre><code>- **架构设计**：    - 技术选型（如Spring Cloud用于分布式系统）。    - 部署拓扑设计（如负载均衡、集群配置）。  - **模块化设计**：    - 定义模块职责（如“支付模块”处理第三方支付对接）。    - 制定接口规范（如使用OpenAPI定义接口参数）。  - **全局数据结构**：    - 数据库表结构设计（如订单表的字段与索引）。    - 数据流设计（如Kafka消息队列处理异步任务）。  </code></pre><h3 id="11-详细设计任务（6分）"><a href="#11-详细设计任务（6分）" class="headerlink" title="11. 详细设计任务（6分）"></a>11. <strong>详细设计任务（6分）</strong></h3><pre><code>- **模块内部设计**：    - 算法设计（如使用LRU算法实现缓存淘汰）。    - 类/方法详细定义（如“PaymentService”类的`processPayment()`方法逻辑）。  - **接口细化**：    - 输入/输出参数校验规则（如金额必须为正数）。    - 错误码与异常处理机制。  - **测试设计**：    - 单元测试用例（如JUnit测试覆盖边界条件）。    - 性能测试方案（如使用JMeter模拟高并发支付请求）。  </code></pre><hr><h2 id="模块化设计与软件设计"><a href="#模块化设计与软件设计" class="headerlink" title="模块化设计与软件设计"></a><strong>模块化设计与软件设计</strong></h2><h3 id="12-模块化设计的优点及维护作用（6分）"><a href="#12-模块化设计的优点及维护作用（6分）" class="headerlink" title="12. 模块化设计的优点及维护作用（6分）"></a>12. <strong>模块化设计的优点及维护作用（6分）</strong></h3><pre><code>- **开发阶段优势**：    - 并行开发（团队A开发用户模块，团队B开发商品模块）。    - 复用性（通用模块如“日志工具”可跨项目复用）。  - **维护阶段优势**：    - 局部修改（修复支付模块漏洞无需改动订单模块）。    - 易于替换（如将MySQL替换为PostgreSQL仅需调整数据访问层模块）。  - **经济性**：降低长期维护成本（据统计，模块化系统维护成本减少40%）。  </code></pre><h3 id="13-模块独立性原则（6分）"><a href="#13-模块独立性原则（6分）" class="headerlink" title="13. 模块独立性原则（6分）"></a>13. <strong>模块独立性原则（6分）</strong></h3><pre><code>- **高内聚（Cohesion）**：    - 功能内聚：模块内代码仅完成单一功能（如“加密模块”只负责数据加密）。    - 避免逻辑内聚（如将无关功能塞入同一模块）。  - **低耦合（Coupling）**：    - 数据耦合：通过参数传递必要数据（而非直接修改全局变量）。    - 避免内容耦合（如模块直接修改另一模块的内部数据）。  - **衡量标准**：    - 模块依赖关系图复杂度（如使用SonarQube分析依赖环）。  </code></pre><h3 id="14-软件设计启发规则（6分）"><a href="#14-软件设计启发规则（6分）" class="headerlink" title="14. 软件设计启发规则（6分）"></a>14. <strong>软件设计启发规则（6分）</strong></h3><pre><code>- **抽象化**：分层设计（如展示层、业务逻辑层、数据层）。  - **逐步求精**：从架构到细节逐步细化（如先定义接口，再实现具体类）。  - **可扩展性**：预留扩展点（如使用策略模式支持多支付方式）。  - **防御性编程**：    - 输入校验（防止SQL注入）。    - 异常捕获与日志记录（如try-catch块记录错误上下文）。  - **标准化命名**：提高代码可读性（如`getUserById()`而非`func1()`）。  </code></pre><hr><h2 id="软件测试与调试"><a href="#软件测试与调试" class="headerlink" title="软件测试与调试"></a><strong>软件测试与调试</strong></h2><h3 id="15-测试指导原则（6分）"><a href="#15-测试指导原则（6分）" class="headerlink" title="15. 测试指导原则（6分）"></a>15. <strong>测试指导原则（6分）</strong></h3><pre><code>- **尽早测试**：需求阶段编写测试用例（如BDD行为驱动开发）。  - **缺陷集群性**：遵循“二八定律”（重点测试核心模块，如电商系统的支付功能）。  - **杀虫剂悖论**：定期更新测试用例（避免用例失效）。  - **测试分级**：    - 单元测试（开发者编写）。    - 集成测试（验证模块间交互）。    - 系统测试（端到端场景覆盖）。  - **不可穷举性**：    - 使用等价类划分（如输入分为有效/无效类）。    - 边界值分析（测试0、最大值、最小值）。  </code></pre><h3 id="16-α测试-vs-β测试（6分）"><a href="#16-α测试-vs-β测试（6分）" class="headerlink" title="16. α测试 vs β测试（6分）"></a>16. <strong>α测试 vs β测试（6分）</strong></h3><pre><code>- **α测试**：    - **环境**：受控实验室环境。    - **参与者**：内部测试团队或特定用户。    - **目标**：发现功能性缺陷（如按钮点击无响应）。    - **阶段**：开发末期，产品未完全稳定。  - **β测试**：    - **环境**：真实用户环境（不同设备、网络条件）。    - **参与者**：外部真实用户。    - **目标**：验证用户体验、性能及兼容性（如安卓多机型适配）。    - **阶段**：发布前最终验证。  </code></pre><h3 id="17-测试、调试、修复的关系（6分）"><a href="#17-测试、调试、修复的关系（6分）" class="headerlink" title="17. 测试、调试、修复的关系（6分）"></a>17. <strong>测试、调试、修复的关系（6分）</strong></h3><pre><code>- **测试**：通过用例执行发现缺陷（如自动化测试脚本报错）。  - **调试**：    - 定位问题根源（如使用断点调试、日志分析）。    - 最小化复现步骤（如特定输入触发崩溃）。  - **修复**：    - 修改代码并验证（如修复后重新执行测试用例）。    - 回归测试（确保修复未引入新缺陷）。  - **循环过程**：测试→调试→修复→再测试，直至缺陷关闭。  </code></pre><h3 id="18-开发与测试过程的关系（6分）"><a href="#18-开发与测试过程的关系（6分）" class="headerlink" title="18. 开发与测试过程的关系（6分）"></a>18. <strong>开发与测试过程的关系（6分）</strong></h3><pre><code>- **传统模型（如瀑布模型）**：    - 测试作为独立阶段（开发完成后执行），易导致缺陷堆积。  - **V模型**：    - 测试设计并行于开发（如单元测试对应编码阶段）。  - **敏捷模型**：    - 持续集成（每天构建+自动化测试）。    - 测试驱动开发（TDD）：先写测试用例，再实现代码。  - **DevOps实践**：    - 自动化测试嵌入CI/CD流水线（如Jenkins执行测试脚本）。  </code></pre><hr><h2 id="可行性研究与软件项目管理"><a href="#可行性研究与软件项目管理" class="headerlink" title="可行性研究与软件项目管理"></a><strong>可行性研究与软件项目管理</strong></h2><h3 id="19-可行性研究方面（6分）"><a href="#19-可行性研究方面（6分）" class="headerlink" title="19. 可行性研究方面（6分）"></a>19. <strong>可行性研究方面（6分）</strong></h3><pre><code>- **技术可行性**：    - 现有技术能否实现需求（如AI算法精度是否达标）。    - 技术风险评估（如采用未成熟框架可能导致延期）。  - **经济可行性**：    - 成本估算（人力、硬件、软件许可）。    - ROI分析（预期收益是否覆盖成本）。  - **操作可行性**：    - 用户能力匹配（如系统是否需要复杂培训）。    - 组织流程适应性（如是否需重组部门结构）。  - **法律可行性**：    - 合规性审查（如GDPR数据隐私保护）。    - 知识产权风险（如避免使用未授权开源协议）。  </code></pre><h3 id="20-可行性研究的作用（6分）"><a href="#20-可行性研究的作用（6分）" class="headerlink" title="20. 可行性研究的作用（6分）"></a>20. <strong>可行性研究的作用（6分）</strong></h3><pre><code>- **决策支持**：    - 提供Go/No-Go依据（如成本超预算则终止项目）。  - **风险预警**：    - 提前识别技术瓶颈（如并发性能不达标）。  - **资源规划**：    - 确定所需团队规模、硬件采购计划。  - **合同依据**：    - 客户与开发方对可行性结论达成共识，减少后期纠纷。  </code></pre><h3 id="21-软件项目管理的意义（6分）"><a href="#21-软件项目管理的意义（6分）" class="headerlink" title="21. 软件项目管理的意义（6分）"></a>21. <strong>软件项目管理的意义（6分）</strong></h3><pre><code>- **目标管理**：    - 通过WBS（工作分解结构）明确任务优先级。  - **进度控制**：    - 甘特图跟踪里程碑，应对延期风险（如关键路径法）。  - **成本控制**：    - 预算分配与监控（如人力成本占总预算60%）。  - **质量管理**：    - 制定测试计划与缺陷修复SLA（如严重缺陷24小时内修复）。  - **团队协作**：    - 使用Jira分配任务，每日站会同步进展。  </code></pre><hr><h2 id="软件文档与需求规格"><a href="#软件文档与需求规格" class="headerlink" title="软件文档与需求规格"></a><strong>软件文档与需求规格</strong></h2><h3 id="22-用户需求书-vs-软件需求规格书（6分）"><a href="#22-用户需求书-vs-软件需求规格书（6分）" class="headerlink" title="22. 用户需求书 vs 软件需求规格书（6分）"></a>22. <strong>用户需求书 vs 软件需求规格书（6分）</strong></h3><pre><code>- **用户需求说明书（URS）**：    - **编写方**：业务分析师与用户共同制定。    - **内容**：      - 业务目标（如“提升订单处理效率30%”）。      - 功能描述（自然语言，如“支持批量导入订单”）。      - 非功能需求（如“系统可用性99.9%”）。    - **读者**：用户、项目经理、市场人员。  - **软件需求规格书（SRS）**：    - **编写方**：系统分析师与技术团队。    - **内容**：      - 系统行为详细定义（如“批量导入接口支持CSV格式，最大文件大小100MB”）。      - 数据字典（如“订单ID为32位字符串”）。      - 性能指标（如“并发处理能力≥1000 TPS”）。    - **读者**：开发、测试、架构师。  - **核心区别**：    - URS聚焦“做什么”，SRS定义“怎么做”。  </code></pre><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2 镜像模式网络配置指南</title>
      <link href="/2025/04/14/WSL2%E9%95%9C%E5%83%8F%E6%A8%A1%E5%BC%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2025/04/14/WSL2%E9%95%9C%E5%83%8F%E6%A8%A1%E5%BC%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>当在 WSL2 环境中使用 <code>nvm</code> 等工具时，常会遇到网络访问限制问题（被墙了）。通过配置镜像模式网络，可使 WSL2 直接继承 Windows 宿主机的 VPN 网络环境，实现无缝网络访问。</p><span id="more"></span><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="1-升级-WSL-内核版本"><a href="#1-升级-WSL-内核版本" class="headerlink" title="1. 升级 WSL 内核版本"></a>1. 升级 WSL 内核版本</h3><p>在 <strong>Windows PowerShell</strong> 中以管理员身份执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新到预览版内核（需Windows 11 22H2及以上）</span></span><br><span class="line">wsl <span class="literal">--update</span> <span class="literal">--pre-release</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证版本（要求 0.67.6+）</span></span><br><span class="line">wsl <span class="literal">--version</span></span><br></pre></td></tr></table></figure><h3 id="2-创建-wslconfig-系统级配置文件"><a href="#2-创建-wslconfig-系统级配置文件" class="headerlink" title="2. 创建 .wslconfig 系统级配置文件"></a>2. 创建 .wslconfig 系统级配置文件</h3><p>在 C:\Users[用户名] 目录下新建 .wslconfig 文件，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[wsl2]</span></span><br><span class="line"><span class="attr">nestedVirtualization</span>=<span class="literal">true</span>    <span class="comment">; 启用嵌套虚拟化</span></span><br><span class="line"><span class="attr">ipv6</span>=<span class="literal">true</span>                    <span class="comment">; 启用IPv6支持</span></span><br><span class="line"></span><br><span class="line"><span class="section">[experimental]</span></span><br><span class="line"><span class="attr">autoMemoryReclaim</span>=gradual    <span class="comment">; 渐进式内存回收</span></span><br><span class="line"><span class="attr">networkingMode</span>=mirrored      <span class="comment">; 核心配置：启用镜像网络模式</span></span><br><span class="line"><span class="attr">dnsTunneling</span>=<span class="literal">true</span>            <span class="comment">; 强制通过Windows DNS解析</span></span><br><span class="line"><span class="attr">firewall</span>=<span class="literal">true</span>                <span class="comment">; 继承Windows防火墙规则</span></span><br><span class="line"><span class="attr">autoProxy</span>=<span class="literal">true</span>               <span class="comment">; 自动同步系统代理设置</span></span><br></pre></td></tr></table></figure><h3 id="3-重启-WSL-子系统"><a href="#3-重启-WSL-子系统" class="headerlink" title="3. 重启 WSL 子系统"></a>3. 重启 WSL 子系统</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 完全关闭WSL实例</span></span><br><span class="line">wsl <span class="literal">--shutdown</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动默认发行版（根据实际情况替换发行版名称）</span></span><br><span class="line">wsl <span class="literal">-d</span> Ubuntu<span class="literal">-22</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure><p>⚠️ 注意事项：镜像模式需要 Windows 11 Build 22000 及以上版本支持。</p>]]></content>
      
      
      
        <tags>
            
            <tag> wsl </tag>
            
            <tag> 网络配置 </tag>
            
            <tag> 代理设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2025/02/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2025/02/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>单例模式（Singleton Pattern）是一种常见的设计模式，属于创建型设计模式（Creational Design Patterns），旨在确保一个类在整个系统中只有一个实例，并且提供一个全局的访问点来获取这个实例。</p><p>具体来说，单例模式通过限制类的实例化次数，确保系统中只有一个该类的对象存在。这通常用于以下场景：</p><ul><li>当系统需要共享一个资源，比如数据库连接、日志记录器或配置管理器时。</li><li>确保一个类的实例被全局共享，避免资源浪费。</li></ul><span id="more"></span><h2 id="为什么要使用单例模式呢（什么时候应该使用单例模式）"><a href="#为什么要使用单例模式呢（什么时候应该使用单例模式）" class="headerlink" title="为什么要使用单例模式呢（什么时候应该使用单例模式）"></a>为什么要使用单例模式呢（什么时候应该使用单例模式）</h2><p>单例模式的使用场景通常包括以下几种情况：</p><ol><li><p>节约资源：当多个模块或组件需要共享同一个资源时。使用单例模式可以确保资源的一致性，避免重复创建和销毁实例。例如，数据库连接池、线程池等。</p></li><li><p>全局控制：保证只有一个实例，这样就可以严格的控制客户怎样访问它以及何时访问它，简单的说就是对唯一实例的受控访问。</p></li><li><p>控制实例数量：在某些情况下，系统中某个类的实例只能有一个，否则会导致逻辑错误或资源冲突。例如，配置管理器、日志记录器等。</p></li><li><p>懒加载：单例模式可以延迟实例的创建，直到第一次使用时才进行初始化，从而节省系统资源。</p></li></ol><h2 id="单例模式的基本要求"><a href="#单例模式的基本要求" class="headerlink" title="单例模式的基本要求"></a>单例模式的基本要求</h2><ol><li><p>私有的静态实例变量：类内部维护一个静态的实例变量，用于保存唯一的实例。</p></li><li><p>私有构造函数：防止外部通过 new 关键字创建实例，确保实例的唯一性。</p></li><li><p>公有静态访问方法：提供一个静态的公共方法（通常命名为 getInstance），用于获取该类的唯一实例。</p></li><li><p>线程安全：在多线程环境下，确保单例模式的实现是线程安全的，避免多个线程同时创建多个实例。</p> <img src="/2025/02/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image.png"></li></ol><h2 id="单例模式的实现方法"><a href="#单例模式的实现方法" class="headerlink" title="单例模式的实现方法"></a>单例模式的实现方法</h2><ol><li><p>懒汉式（Lazy Initialization）<br>懒汉式单例模式在第一次调用 getInstance 方法时才创建实例。优点是延迟初始化，节省资源；缺点是在多线程环境下需要额外的同步机制来保证线程安全。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>饿汉式（Eager Initialization）<br>饿汉式单例模式在类加载时就创建实例。优点是实现简单，线程安全；缺点是如果实例一直没有被使用，会造成资源浪费。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双重检查锁（Double-Checked Locking）<br>双重检查锁单例模式结合了懒汉式和饿汉式的优点，既实现了延迟初始化，又保证了线程安全。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="单例模式的优缺点"><a href="#单例模式的优缺点" class="headerlink" title="单例模式的优缺点"></a>单例模式的优缺点</h2><p>优点:</p><ul><li>控制实例数量：确保系统中只有一个实例，避免资源浪费。</li><li>全局访问点：提供了一个全局的访问点，方便其他模块获取实例。</li><li>延迟初始化：可以在需要时才创建实例，节省系统资源。</li></ul><p>缺点:</p><ul><li>难以扩展：单例模式通常难以扩展，因为它的实例是全局唯一的，扩展可能会导致设计复杂化。</li><li>违反单一职责原则：单例类通常既负责业务逻辑，又负责实例管理，违反了单一职责原则。</li><li>测试困难：由于单例模式的全局性，单元测试时可能会遇到困难，尤其是在需要模拟或替换单例实例时。</li></ul><h2 id="单例模式的应用场景"><a href="#单例模式的应用场景" class="headerlink" title="单例模式的应用场景"></a>单例模式的应用场景</h2><p>单例模式的应用场景非常广泛，在以下几个方面有着广泛的应用：</p><ul><li>配置管理：系统中通常只需要一个配置管理器来读取和保存配置信息。</li><li>日志记录：日志记录器通常只需要一个实例来记录系统的运行日志。</li><li>数据库连接池：数据库连接池通常只需要一个实例来管理数据库连接。</li><li>缓存系统：缓存系统通常只需要一个实例来管理缓存数据。</li><li>线程池：线程池通常只需要一个实例来管理线程资源。</li><li>硬件访问：某些硬件资源（如打印机、扫描仪等）通常只需要一个实例来管理访问。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>缓存淘汰策略：LRU</title>
      <link href="/2025/01/16/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5%EF%BC%9ALRU/"/>
      <url>/2025/01/16/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5%EF%BC%9ALRU/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="缓存淘汰策略：LRU"><a href="#缓存淘汰策略：LRU" class="headerlink" title="缓存淘汰策略：LRU"></a>缓存淘汰策略：LRU</h2><p>LRU（Least Recently Used）是一种常用的缓存淘汰策略，其原理是如果缓存中某个数据项最近被访问过，那么它将很可能再次被访问，所以应当将其保留在缓存中。LRU算法通过记录每个数据项的访问时间，并按时间顺序淘汰最久未使用的缓存项。</p><ol><li>维护一个队列，队列中保存缓存中所有数据项的访问时间，队列中的数据项按照访问时间的先后顺序排列。</li><li>当缓存中没有空闲空间时，需要淘汰缓存中最久未使用的缓存项。</li><li>访问缓存中的某一数据项时，将其对应的访问时间从队列中删除，并将其插入到队尾。</li><li>当缓存中有空闲空间时，需要淘汰缓存中最久未使用的缓存项。</li><li>重复步骤3和4，直到缓存中没有数据项可淘汰。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ - 缓存系统 - 算法 - 缓存淘汰策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存系统(C++)</title>
      <link href="/2025/01/16/%E7%BC%93%E5%AD%98%E7%B3%BB%E7%BB%9F-C/"/>
      <url>/2025/01/16/%E7%BC%93%E5%AD%98%E7%B3%BB%E7%BB%9F-C/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h2><p>缓存（Cache）是一种存储数据的机制，用于加速数据的读取过程。它是计算机系统中为提高效率而设计的一种临时存储方式，通常存储着访问频繁的、即将被使用的数据或计算结果。缓存通常存在于内存中，因为内存读取速度比从硬盘等其他存储设备读取要快得多。</p><span id="more"></span><h2 id="为什么要实现缓存系统"><a href="#为什么要实现缓存系统" class="headerlink" title="为什么要实现缓存系统"></a>为什么要实现缓存系统</h2><p>在缓存系统中，缓存淘汰策略的设计至关重要，因为服务器的内存有限，不能无限制地存储所有数据。有效的淘汰策略能够确保当内存空间不足时，系统能智能地选择删除哪些缓存数据，以优化性能并提高资源的访问效率。以下是几种常见的缓存淘汰策略。</p><ul><li>先进先出（FIFO）策略：最简单的缓存淘汰策略，淘汰最早进入缓存的数据。</li><li>最近最久未使用（LRU）策略：淘汰最近最少使用的缓存数据，即缓存中最长时间没有被访问的数据。</li><li>最不经常使用（LFU）策略：淘汰访问频率最低的缓存数据，即缓存中访问次数最少的数据。</li><li>自适应替换（ARC）策略：淘汰最近最少访问的缓存数据，即缓存中最近最少被访问的数据。</li></ul><h2 id="在什么地方加入缓存系统？"><a href="#在什么地方加入缓存系统？" class="headerlink" title="在什么地方加入缓存系统？"></a>在什么地方加入缓存系统？</h2><p>缓存系统可以应用于数据库、文件系统、网络传输、操作系统等任何需要高速访问的数据源。缓存系统的加入可以提高系统的整体性能，降低系统的响应时间，并减少服务器的负载。</p><p>总的来说，一个流程的很多阶段都可以架设缓存系统，距离使用者越近就越能发挥缓存的效果。</p><h2 id="缓存淘汰策略"><a href="#缓存淘汰策略" class="headerlink" title="缓存淘汰策略"></a>缓存淘汰策略</h2><h3 id="先进先出（FIFO）策略"><a href="#先进先出（FIFO）策略" class="headerlink" title="先进先出（FIFO）策略"></a>先进先出（FIFO）策略</h3><p>先进先出算法，是最简单的页面替换策略，按照页面进入内存的顺序来决定替换哪个页面。即优先淘汰最早进入内存的页面，不论这些页面之后是否被频繁访问。但是FIFO可能会导致“Belady异常”，即随着分配给进程的物理块数增加，缺页次数反而增加。</p><h3 id="最近最久未使用（LRU）策略"><a href="#最近最久未使用（LRU）策略" class="headerlink" title="最近最久未使用（LRU）策略"></a>最近最久未使用（LRU）策略</h3><p>LRU算法，是一种常用的页面替换算法，它认为最近最久未使用的数据是最不可能再次被访问的。LRU算法维护一个列表，记录每个页面被访问的顺序，每次访问页面时，将其移至列表的最前面。当内存空间不足时，LRU算法淘汰列表末尾的页面，即最近最久未使用的数据。</p><p>潜在问题：淘汰热点数据，如果有个数据在1个小时的前59分钟访问了1万次(可见这是个热点数据),再后一分钟没有访问这个数据，但是有其他的数据访问，就导致了我们这个热点数据被淘汰。</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ - 缓存系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从简单的动态规划问题探讨解决动态规划的核心</title>
      <link href="/2024/11/02/%E4%BB%8E%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E6%8E%A2%E8%AE%A8%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E6%A0%B8%E5%BF%83/"/>
      <url>/2024/11/02/%E4%BB%8E%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E6%8E%A2%E8%AE%A8%E8%A7%A3%E5%86%B3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9A%84%E6%A0%B8%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p>如果某一问题有很多重叠子问题，使用动态规划是最有效的。</p><p>动态规划中每一个状态一定是由上一个状态推导出来的，这一点就区分于贪心，贪心没有状态推导，而是从局部直接选最优的。</p><span id="more"></span><h2 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h2><p>动态规划，英文：Dynamic Programming，简称DP，是一种通过把复杂问题分解为相对简单的子问题，再从子问题的解得到原问题的解的方法。</p><h2 id="动态规划的解题步骤"><a href="#动态规划的解题步骤" class="headerlink" title="动态规划的解题步骤"></a>动态规划的解题步骤</h2><p>动态规划的解题步骤如下：</p><ol><li>确定dp数组（dp table）以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ol><h2 id="动态规划应该如何debug"><a href="#动态规划应该如何debug" class="headerlink" title="动态规划应该如何debug"></a>动态规划应该如何debug</h2><p>破除这个问题的最好方式就是把dp数组打印出来，看看究竟是不是按照自己思路推导的！</p><h2 id="动态规划的应用场景"><a href="#动态规划的应用场景" class="headerlink" title="动态规划的应用场景"></a>动态规划的应用场景</h2><p>动态规划的应用场景主要有以下几种：</p><ol><li>最短路径问题：比如求解一个图中从一个节点到另一个节点的最短路径，动态规划可以解决这个问题。</li><li>最大子数组问题：比如求解一个数组中连续子数组的最大和，动态规划可以解决这个问题。</li><li>背包问题：比如求解一个背包问题，动态规划可以解决这个问题。</li><li>股票问题：比如求解一个股票的最大利润，动态规划可以解决这个问题。</li><li>数学问题：比如求解一些数学问题，动态规划可以解决这个问题。</li></ol><h2 id="动态规划的核心思想"><a href="#动态规划的核心思想" class="headerlink" title="动态规划的核心思想"></a>动态规划的核心思想</h2><p>动态规划的核心思想是分治法，即将原问题分解为子问题，然后递归求解子问题，最后合并子问题的解得到原问题的解。</p><p>动态规划的核心是状态转移方程，即如何从子问题的解得到原问题的解。</p><h2 id="找出最长的神奇数列【简单算法实例】"><a href="#找出最长的神奇数列【简单算法实例】" class="headerlink" title="找出最长的神奇数列【简单算法实例】"></a>找出最长的神奇数列【简单算法实例】</h2><hr><p><strong>问题描述</strong>：</p><p>小F是一个好学的中学生，今天他学习了数列的概念。他在纸上写下了一个由 0 和 1 组成的正整数序列，长度为 n。这个序列中的 1 和 0 交替出现，且至少由 3 个连续的 0 和 1 组成的部分数列称为「神奇数列」。例如，10101 是一个神奇数列，而 1011 不是。现在，小F想知道在这个序列中，最长的「神奇数列」是哪一个。你能帮他找到吗？</p><p>如果有多个神奇数列，那么输出最先出现的一个。</p><hr><p><strong>测试样例</strong>:<br>样例1：</p><blockquote><p>输入：inp &#x3D; “0101011101”<br>输出：’010101’</p></blockquote><p>样例2：</p><blockquote><p>输入：inp &#x3D; “1110101010000”<br>输出：’10101010’</p></blockquote><p>样例3：</p><blockquote><p>输入：inp &#x3D; “1010101010101010”<br>输出：’1010101010101010’</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">inp</span>):</span><br><span class="line">    dp = [<span class="number">0</span>] * <span class="built_in">len</span>(inp)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(inp)):</span><br><span class="line">        <span class="keyword">if</span> inp[i-<span class="number">1</span>] == inp[i]:</span><br><span class="line">            dp[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] +<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    max_len = <span class="built_in">max</span>(dp)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> max_len &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">    start_index = dp.index(max_len) - max_len + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> inp[start_index:start_index + max_len]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(solution(<span class="string">&quot;0101011101&quot;</span>) == <span class="string">&quot;010101&quot;</span>)</span><br></pre></td></tr></table></figure><p>题解思路：</p><ol><li>确定dp数组（dp table）以及下标的含义：我们可以使用一个一维的dp数组来记录以当前字符结尾的最长神奇数列的长度。<ul><li>dp[i] 表示以 inp[i] 结尾的最长神奇数列的长度。</li></ul></li><li>确定递推公式：<ul><li>如果 inp[i-1] &#x3D;&#x3D; inp[i]，则 dp[i] &#x3D; dp[i-1] + 1。</li><li>如果 inp[i-1]!&#x3D; inp[i]，则 dp[i] &#x3D; 1。</li></ul></li><li>dp数组如何初始化：<ul><li>dp[0] &#x3D; 1，因为以 0 结尾的最长神奇数列的长度肯定是 1。</li></ul></li><li>确定遍历顺序：我们从第二个字符开始遍历到字符串的末尾，依次更新 dp 数组。</li><li>举例推导dp数组：<ul><li>假设当前字符为 0，则 dp[0] &#x3D; 1。</li><li>假设当前字符为 1，则 dp[1] &#x3D; 1。</li><li>假设当前字符为 0，则 dp[2] &#x3D; 1。</li><li>假设当前字符为 1，则 dp[3] &#x3D; 2。</li><li>假设当前字符为 0，则 dp[4] &#x3D; 1。</li><li>假设当前字符为 1，则 dp[5] &#x3D; 2。</li><li>假设当前字符为 0，则 dp[6] &#x3D; 1。</li><li>假设当前字符为 1，则 dp[7] &#x3D; 2。</li><li>假设当前字符为 0，则 dp[8] &#x3D; 1。</li><li>假设当前字符为 1，则 dp[9] &#x3D; 2。</li><li>假设当前字符为 0，则 dp[10] &#x3D; 1。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>动态规划问题的解决方法大致分为以上五步，其余优化等等，仍需在实际问题中不断总结。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初入Vue.js</title>
      <link href="/2024/10/25/%E5%88%9D%E5%85%A5Vue-js/"/>
      <url>/2024/10/25/%E5%88%9D%E5%85%A5Vue-js/</url>
      
        <content type="html"><![CDATA[<p>对于vue.js渐进式教程的一些总结与思考，方便自己以后查阅。以下是一些基础概念，我会在进一步学习后补全。</p><span id="more"></span><h2 id="起步（什么是Vue-js）"><a href="#起步（什么是Vue-js）" class="headerlink" title="起步（什么是Vue.js）"></a>起步（什么是Vue.js）</h2><p>Vue.js是一个渐进式的前端框架，它是一套用于构建用户界面的渐进式框架。它与其它大型框架不同，它专注于MVVM（模型-视图-视图模型）架构和组件化开发。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>Vue.js的语法与其它前端框架有所不同，它使用了HTML-based模板语法，并提供了一些自定义指令来绑定数据和DOM。</p><h3 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h3><ol><li><p>Vue 的核心功能就是声明式渲染：通过扩展于标准 HTML 的模板语法，我们可以根据 JavaScript 的状态来描述 HTML 应该是什么样子的。当状态改变时，HTML 会自动更新。</p></li><li><p>能在改变时触发更新的状态被称作是响应式的。</p></li><li><p><code>reactive()</code>: 用于将一个普通的对象转换成响应式数据。reactive返回一个响应式的Proxy对象，通过修改该对象的属性值，可以触发组件更新。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    state.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ref()</code>: 于将一个普通的数据类型转换成响应式数据。ref返回一个包含value属性的对象，通过修改value属性的值，可以触发组件更新。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意：reactive() 和 ref() 的区别在于：在使用上，ref更方便一些，使用起来更简单直观。而reactive比较灵活，可以将任意对象转换成响应式数据，并且可以进行深层次的响应式处理。<br>Vue 单文件组件 (Single-File Component，缩写为 SFC)。单文件组件是一种可复用的代码组织形式，它将从属于同一&gt; 个组件的 HTML、CSS 和 JavaScript 封装在使用 .vue 后缀的文件中。</p></blockquote><h2 id="Attribute-绑定"><a href="#Attribute-绑定" class="headerlink" title="Attribute 绑定"></a>Attribute 绑定</h2><p>Vue.js的指令可以绑定数据到DOM元素的属性上。<br><code>v-bind</code> 是 Vue.js 中一个非常重要的指令，用于动态绑定 HTML 属性或组件 props。通过 <code>v-bind</code>，你可以将一个数据属性的值绑定到 DOM 元素的属性上，实现数据与视图的同步。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="attr">bind</span>:id=<span class="string">&quot;dynamicId&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml">&lt;-- 简写 --&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><p><code>v-on</code> 用于监听 DOM 事件并执行相应的 JavaScript 代码。通过 <code>v-on</code>，你可以监听 DOM 事件并在触发时执行 JavaScript 代码，实现视图与逻辑的解耦。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-<span class="attr">on</span>:click=<span class="string">&quot;increment&quot;</span>&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line"><span class="language-xml">&lt;-- 简写 --&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h2><p><code>v-on</code> and <code>v-bind</code> 的关系:</p><ul><li>数据驱动：v-bind 用于将数据动态绑定到元素的属性上，而 v-on 则用于响应用户的交互（如点击、输入等）并更新数据。它们共同构成了 Vue 的响应式系统。</li><li>更新视图：使用 v-on 触发的事件可以改变数据，随后 v-bind 会自动更新绑定的属性，从而实现视图的同步更新。</li></ul><p>我们可以同时使用 v-bind 和 v-on 来在表单的输入元素上创建双向绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;onInput&quot;</span>&gt;</span></span><br><span class="line">&lt;-- 等价于 --&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>v-model 会将被绑定的值与 <code>&lt;input&gt;</code> 的值自动同步，这样我们就不必再使用事件处理函数了。<br>v-model 不仅支持文本输入框，也支持诸如多选框、单选框、下拉框之类的输入类型。</p></blockquote><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p><code>v-if</code> 是 Vue.js 中用于条件渲染的指令，可以根据布尔值动态决定是否渲染某个元素。当条件为真时，元素会被渲染；当条件为假时，元素不会出现在 DOM 中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Bye<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p><code>v-for</code> 是 Vue.js 中用于遍历数组或对象并渲染列表的指令。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 给每个 todo 对象一个唯一的 id</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> id = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> newTodo = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> todos = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn HTML&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span>.<span class="title function_">push</span>(&#123; <span class="attr">id</span>: id++, <span class="attr">text</span>: newTodo.<span class="property">value</span> &#125;)</span></span><br><span class="line"><span class="language-javascript">  newTodo.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">removeTodo</span>(<span class="params">todo</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t !== todo)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;addTodo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;newTodo&quot;</span> <span class="attr">required</span> <span class="attr">placeholder</span>=<span class="string">&quot;new todo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add Todo<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;todo.id&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeTodo(todo)&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p> <code>computed()</code> ：是 Vue.js 中用于创建计算属性的选项。它可以帮助我们将数据转换为可读的状态，并根据需要缓存计算结果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> firstName = <span class="title function_">ref</span>(<span class="string">&#x27;John&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> lastName = <span class="title function_">ref</span>(<span class="string">&#x27;Doe&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> fullName = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName.value&#125;</span> <span class="subst">$&#123;lastName.value&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Full Name: &#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;firstName.value = &#x27;Jane&#x27;&quot;</span>&gt;</span>Change First Name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;lastName.value = &#x27;Smith&#x27;&quot;</span>&gt;</span>Change Last Name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生命周期和模板引用"><a href="#生命周期和模板引用" class="headerlink" title="生命周期和模板引用"></a>生命周期和模板引用</h2><p> <code>onMounted()</code>: 在组件被挂载到 DOM 之后执行的函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pElementRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  pElementRef.<span class="property">value</span>.<span class="property">textContent</span> = <span class="string">&#x27;mounted!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;pElementRef&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：模板引用是一种特殊的语法，它允许我们在模板中嵌入一个组件，并将其作为一个变量来使用。模板引用的语法是 <code>#</code>，后面跟着组件的名字。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-child</span>&gt;</span><span class="tag">&lt;/<span class="name">my-child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyChild</span> <span class="keyword">from</span> <span class="string">&#x27;./MyChild.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">my-child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Child Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a child component.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p> <code>watch()</code> ：是 Vue.js 中用于观察数据的变化并执行相应的函数的选项。它可以帮助我们在数据变化时执行异步或开销较大的操作，并自动更新 DOM。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;newValue&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：watch() 接收两个参数：要观察的表达式（可以是一个函数）和回调函数。回调函数会在表达式的值发生变化时被调用，并接收两个参数：当前值和上一个值。</p></blockquote><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>真正的 Vue 应用往往是由嵌套组件创建的。父组件可以在模板中渲染另一个组件作为子组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>A Child Component!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ChildComp.vue --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p><code>props</code> : 是 Vue.js 中用于定义组件属性的选项。它可以接收一个数组，包含组件接收的 props 的名称。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">msg</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg || &#x27;No props passed yet&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ChildComp.vue --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> name = <span class="string">&#x27;John&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：props 选项应该定义在组件的选项对象中，而不是 data 选项中。</p></blockquote><h2 id="Emits"><a href="#Emits" class="headerlink" title="Emits"></a>Emits</h2><p> <code>emits</code>: 选项允许我们定义一个自定义事件，这个事件可以在父组件中用 <code>v-on</code> 监听。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;response&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">emit</span>(<span class="string">&#x27;response&#x27;</span>, <span class="string">&#x27;hello from child&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Child component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ParentComp.vue --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> childMsg = <span class="title function_">ref</span>(<span class="string">&#x27;No child msg yet&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span> @<span class="attr">response</span>=<span class="string">&quot;(msg) =&gt; childMsg = msg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; childMsg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：emits 选项应该定义在组件的选项对象中，而不是 data 选项中。</p></blockquote><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p><code>&lt;slot&gt;</code>: 是 Vue.js 中用于定义组件插槽的元素。它可以让我们在父组件中向子组件提供内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>Fallback content<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ParentComp.vue --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ChildComp</span> <span class="keyword">from</span> <span class="string">&#x27;./ChildComp.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;from parent&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ChildComp</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">ChildComp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：父组件可以向子组件传递内容，子组件可以用 <code>&lt;slot&gt;</code> 元素来接收。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA中的类型转换</title>
      <link href="/2024/10/10/JAVA%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2024/10/10/JAVA%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>容易混淆的java 动态类型 与 静态类型 在这里将会得到易于理解的解释</p><span id="more"></span><h2 id="动态方法选择和类型检查谜题"><a href="#动态方法选择和类型检查谜题" class="headerlink" title="动态方法选择和类型检查谜题"></a>动态方法选择和类型检查谜题</h2><p>Java中每个变量都有一个<code>静态变量类型</code>，这是在声明变量是定义的，并在编译中进行检查。<br>其实每个变量还有一个<code>动态变量类型</code>，这是在实例化变量时指定，在运行中进行检查。</p><ol><li>当 Java 检查应调用哪个方法时，它会根据<code>静态类型</code>来选择，并调用与参数类型匹配的方法。</li><li>当 Java 运行一个被重写的方法时，它会在其<code>动态类型</code>中搜索适当的方法签名并运行它。</li></ol><p>以下是一个演示动态方法选择和类型检查的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal sound&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeSound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Meow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// 静态类型为 Animal，动态类型为 Dog</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">myCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(); <span class="comment">// 静态类型为 Animal，动态类型为 Cat</span></span><br><span class="line">        </span><br><span class="line">        myDog.makeSound(); <span class="comment">// 输出: Bark</span></span><br><span class="line">        myCat.makeSound(); <span class="comment">// 输出: Meow</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译时类型检查和表达式"><a href="#编译时类型检查和表达式" class="headerlink" title="编译时类型检查和表达式"></a>编译时类型检查和表达式</h2><ol><li><p>表达式具有编译时类型：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SLList&lt;Integer&gt; sl = <span class="keyword">new</span> <span class="title class_">VengefulSLList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//VengefulSLList 是 SLList 的一种，因此允许赋值。</span></span><br><span class="line"></span><br><span class="line">VengefulSLList&lt;Integer&gt; vsl = <span class="keyword">new</span> <span class="title class_">SLList</span>&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//这个则不被允许，SLList 不一定是 VengefulSLLis</span></span><br></pre></td></tr></table></figure></li><li><p>方法调用的编译时类型与其声明类型相同。</p></li></ol><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>Java提供了一种强大的类型转换机制，可以让编译器忽略某些类型检查，允许开发者显式地将一种类型转换为另一种类型。然而，这种转换有时可能会带来风险。</p><blockquote><p>Does not actually change anything: sunglasses don’t make the world dark.</p><p>实际上并没有改变任何东西：太阳镜不会让世界变暗。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimitiveCasting</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">myDouble</span> <span class="operator">=</span> <span class="number">9.78</span>;</span><br><span class="line">        <span class="comment">// 强制将 double 转换为 int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">myInt</span> <span class="operator">=</span> (<span class="type">int</span>) myDouble; <span class="comment">// 结果为 9</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Converted int value: &quot;</span> + myInt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发流程</title>
      <link href="/2024/09/24/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/"/>
      <url>/2024/09/24/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>一个程序的诞生！</p><span id="more"></span><h2 id="定义你想解决的问题"><a href="#定义你想解决的问题" class="headerlink" title="定义你想解决的问题"></a>定义你想解决的问题</h2><p>A.“我想编写一个程序，允许我输入许多数字，然后计算它们的平均值。”</p><p>B.“我想编写一个程序，生成一个二维迷宫并让用户在其中导航。如果用户到达终点，则获胜。”</p><p>C.“我想编写一个程序，读取股票价格文件并预测股票是上涨还是下跌。”</p><h2 id="确定你将要如何解决问题"><a href="#确定你将要如何解决问题" class="headerlink" title="确定你将要如何解决问题"></a>确定你将要如何解决问题</h2><p>1.解决方案直接明了的（不过于复杂或令人困惑）</p><p>2.有良好的文档说明（特别是在所做假设或限制方面）</p><p>3.模块化方式构建，由此部分代码可以在不影响程序其他部分的情况下被重用或更改</p><p>4.当发生意外情况时，它们能够优雅地恢复或提供有用的报错信息或者日志文件</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h2 id="编译代码"><a href="#编译代码" class="headerlink" title="编译代码"></a>编译代码</h2><h2 id="链接目标文件和库"><a href="#链接目标文件和库" class="headerlink" title="链接目标文件和库"></a>链接目标文件和库</h2><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h2 id="测试与调试"><a href="#测试与调试" class="headerlink" title="测试与调试"></a>测试与调试</h2>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建简易 Mindustry 服务器</title>
      <link href="/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>如果你也想体验创建自己的 Mindustry 服务器，那这篇文章会给你一个简单又实用的指南。我们将逐步探索从选择服务器到管理组件的全过程，让你轻松上手！</p><span id="more"></span><h2 id="选定服务器"><a href="#选定服务器" class="headerlink" title="选定服务器"></a>选定服务器</h2><p>首先，我们选择了一个简单又免费的方式，这个服务器支持快速开设游戏。需要注意的几点：</p><ol><li><p><a href="https://simpfun.cn/">简幻欢服务器获取地址</a>  </p><img src="/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/image_1.png"></li><li><p><a href="https://www.yuque.com/simpfox/simpdoc/create">建服教程</a>  </p><img src="/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/image_2.png"></li><li><p>服务器地址的组合方式也需要搞清楚，英文和中文之间的差异很重要。比如：  </p><img src="/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/image_3.png">应写为：`play.simpfun.cn:11138`</li></ol><blockquote><p>如果你希望更专业一点，也可以参考这个较复杂的专用服务器部署<a href="https://mindustrygame.github.io/wiki/servers/">文档</a>，可以在本地机器空余机器上进行部署。</p></blockquote><h2 id="Mindustry的DIY"><a href="#Mindustry的DIY" class="headerlink" title="Mindustry的DIY"></a>Mindustry的DIY</h2><p>服务器搭建完成后，你可能会发现既没有图像也没有mod，那接下来怎么办呢？</p><h3 id="服务器文件指向"><a href="#服务器文件指向" class="headerlink" title="服务器文件指向"></a>服务器文件指向</h3><img src="/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/image_4.png"><h3 id="获取地图和mod"><a href="#获取地图和mod" class="headerlink" title="获取地图和mod"></a>获取地图和mod</h3><p>想要个性化你的服务器？这里有几个不错的资源：  </p><ul><li><p><a href="https://www.mindustry.top/map">WZ佬的地图站</a></p><img src="/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/image_6.png">  </li><li><p><a href="https://github.com/topics/mindustry-mod">mod</a></p><img src="/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/image_5.png"></li><li><p>还有更多来源，如模组服务器，qq群和Steam创意工坊等。</p></li></ul><h3 id="服务器管理组件"><a href="#服务器管理组件" class="headerlink" title="服务器管理组件"></a>服务器管理组件</h3><p>这是至关重要的，它会极大提升玩家的游戏体验，让你能够更灵活地管理服务器，例如在游戏中切换地图，模式等功能。<br><a href="https://github.com/way-zer/ScriptAgent4MindustryExt/">服务器管理组件</a><br><img src="/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/image_7.png"></p><h2 id="指令代码解释"><a href="#指令代码解释" class="headerlink" title="指令代码解释"></a>指令代码解释</h2><h3 id="服务器命令"><a href="#服务器命令" class="headerlink" title="服务器命令"></a>服务器命令</h3><ul><li><code>help [command]</code>：显示命令列表，或获取特定命令的帮助。</li><li><code>version</code>：显示服务器版本信息。</li><li><code>exit</code>：退出服务器应用程序。</li><li><code>stop</code>：停止托管服务器。</li><li><code>host [mapname] [mode]</code>：打开服务器。如果未指定，将默认为生存和随机地图。</li><li><code>maps [all/custom/default]</code>：显示可用地图。默认情况下，仅显示自定义地图。</li><li><code>reloadmaps</code>：从磁盘重新加载所有地图。</li><li><code>status</code>：显示服务器状态。</li><li><code>mods</code>：显示所有已加载的模组。</li><li><code>mod &lt;name...&gt;</code>：显示有关已加载插件的信息。</li><li><code>js &lt;script...&gt;</code>：运行任意 Javascript。</li><li><code>say &lt;message...&gt;</code>：向所有玩家发送消息。</li><li><code>pause &lt;on/off&gt;</code>：暂停或取消暂停游戏。</li><li><code>rules [remove/add] [name] [value...]</code>：列出、删除或添加全局规则。无论地图如何，这些都将适用。</li><li><code>fillitems [team]</code>：用物品填充核心。</li><li><code>playerlimit [off/somenumber]</code>：设置服务器玩家限制。</li><li><code>config [name] [value...]</code>：配置服务器设置。</li><li><code>subnet-ban [add/remove] [address]</code>：禁止子网。这只会拒绝所有以某个字符串开头的 IP 的连接。</li><li><code>whitelist [add/remove] [ID]</code>：使用玩家的 ID 在白名单中添加&#x2F;删除玩家。</li><li><code>shuffle [none/all/custom/builtin]</code>：设置地图洗牌模式。</li><li><code>nextmap &lt;mapname...&gt;</code>：设置游戏结束后要玩的下一张地图。覆盖随机播放。</li><li><code>kick &lt;username...&gt;</code>：按名字踢一个人。</li><li><code>ban &lt;type-id/name/ip&gt; &lt;username/IP/ID...&gt;</code>：封禁一个人。</li><li><code>bans</code>：列出所有被禁止的 IP 和 ID。</li><li><code>unban &lt;ip/ID&gt;</code>：通过 IP 或 ID 完全解禁一个人。</li><li><code>pardon &lt;ID&gt;</code>：赦免按ID被投票的玩家，并允许他们再次加入。</li><li><code>admin &lt;add/remove&gt; &lt;username/ID...&gt;</code>：设为在线用户管理员。</li><li><code>admins</code>：列出所有管理员。</li><li><code>players</code>：列出当前在游戏中的所有玩家。</li><li><code>runwave</code>：触发下一波。</li><li><code>loadautosave</code>：加载上次自动保存。</li><li><code>load &lt;slot&gt;</code>：从插槽中加载存档。</li><li><code>save &lt;slot&gt;</code>：将游戏状态保存到插槽。</li><li><code>saves</code>：列出保存目录中的所有保存。</li><li><code>gameover</code>：强制游戏结束。</li><li><code>info &lt;IP/UUID/name...&gt;</code>：查找玩家信息。可以选择性地检查玩家拥有的所有名称或 IP。</li><li><code>search &lt;name...&gt;</code>：搜索使用过部分名称的玩家。</li><li><code>gc</code>：触发垃圾回收。仅测试。</li><li><code>yes</code>：运行最后建议的错误命令。</li></ul><h3 id="服务器配置选项"><a href="#服务器配置选项" class="headerlink" title="服务器配置选项"></a>服务器配置选项</h3><blockquote><p>结合 <em>config [name] [value…]</em> 使用</p></blockquote><ul><li><code>name</code>：客户端上显示的服务器名称。</li><li><code>desc</code>：服务器描述，显示在名称下方。最多 100 个字符。</li><li><code>port</code>：要托管的端口。</li><li><code>autoUpdate</code>：是否自动更新并在新的前沿更新到来时退出。</li><li><code>showConnectMessages</code>：是否显示连接&#x2F;断开连接消息。</li><li><code>enableVotekick</code>：是否启用 votekick。</li><li><code>startCommands</code>：命令在启动时运行。这应该是一个逗号分隔的列表。</li><li><code>logging</code>：是否将所有内容记录到文件中。</li><li><code>strict</code>：严格模式是否开启 - 纠正位置并防止重复的 UUID。</li><li><code>antiSpam</code>：垃圾邮件发送者是否被自动踢出并限制速率。</li><li><code>interactRateWindow</code>：阻止交互速率限制窗口，以秒为单位。</li><li><code>interactRateLimit</code>：区块交互速率限制。</li><li><code>interactRateKick</code>：玩家必须在窗口内互动多少次才能被踢。</li><li><code>messageRateLimit</code>：消息速率限制（以秒为单位）。 0 表示禁用。</li><li><code>messageSpamKick</code>：玩家必须在冷却时间前发送消息多少次才能被踢。 0 禁用。</li><li><code>packetSpamLimit</code>：限制在 3 秒内发送的数据包计数，这将导致黑名单 + 踢。</li><li><code>chatSpamLimit</code>：限制在 2 秒内发送的聊天数据包计数，这将导致黑名单 + 踢。与速率限制不同。</li><li><code>socketInput</code>：允许本地应用程序通过本地 TCP 套接字控制此服务器。</li><li><code>socketInputPort</code>：用于套接字输入的端口。</li><li><code>socketInputAddress</code>：套接字输入的绑定地址。</li><li><code>allowCustomClients</code>：是否允许自定义客户端连接。</li><li><code>whitelist</code>：是否使用白名单。</li><li><code>motd</code>：在连接时向用户显示的消息。</li><li><code>autosave</code>：是否在播放时定期保存地图。</li><li><code>autosaveAmount</code>：自动保存的最大数量。旧的被替换。</li><li><code>autosaveSpacing</code>：自动保存之间的间隔（以秒为单位）。</li><li><code>debug</code>：启用调试日志记录。</li><li><code>snapshotInterval</code>：客户端实体快照间隔（以毫秒为单位）。</li><li><code>autoPause</code>：当没有人在线时，游戏是否应暂停。</li><li><code>roundExtraTime</code>：游戏结束后加载新地图之前的时间，以秒为单位。</li><li><code>maxLogLength</code>：最大日志文件大小（以字节为单位）。</li></ul><h2 id="游戏交流群（萌新群）"><a href="#游戏交流群（萌新群）" class="headerlink" title="游戏交流群（萌新群）"></a>游戏交流群（萌新群）</h2><p><strong>萌新小饭堂</strong><br>qq群：797253575<br>服务器：play.simpfun.cn:11138</p><img src="/2024/08/17/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93Mindustry%E6%9C%8D%E5%8A%A1%E5%99%A8/image_8.png"><hr><p>其中大部分网站其自身都有使用教程，我这里仅提供思路和参考，希望这篇指南能帮助你顺利搭建并管理你的 Mindustry 服务器，快来享受游戏吧！</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[CS61A 2024] 学习历程</title>
      <link href="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/"/>
      <url>/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>学习<strong>CS61A 2024</strong>的一些记录和心得,这是一场有趣的学习旅程！</p><span id="more"></span><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><ul><li>exam：pdf格式的试题</li><li>hw-desciption：hw的描述文档，也就是hw的题目</li><li>hw01-10：家庭作业</li><li>lab00-12：实验</li><li>proj：项目代码</li><li>project -&gt; tests: 测试案例在这里，也许可以找到测试答案也说不定(我做过的仓库代码里面才有哦！)</li></ul><p><a href="https://github.com/shuo-liu16/CS61A">Github项目地址</a><br><a href="https://www.learncs.site/docs/curriculum-resource/cs61a/syllabus">课程网站地址</a></p><blockquote><p>完结撒花🎉🎉🎉,原谅我的拖延,至此完结！</p><p>碎碎念: 原计划2-3周结束，没想到拖了这么久，有时候拖延真的很可怕，就像是滚雪球那样，越拖延就越拖延<br>这个课程并不难，希望你能克服对未知的恐惧，在课程中你的目的是基本了解编程的一些基本概念与抽象</p><p>2024&#x2F;12&#x2F;22 update README.md</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里是我学习<strong>CS61A 2024</strong>的一些记录和心得</p><hr><h2 id="一、CS61A是什么？"><a href="#一、CS61A是什么？" class="headerlink" title="一、CS61A是什么？"></a>一、CS61A是什么？</h2><p>CS61A是加州大学伯克利分校（UC Berkeley）的计算机科学导论课程。这门课程旨在教授计算机科学的基本概念和编程技能，主要使用编程语言Python。它是许多学生的第一门计算机科学课程，涵盖了从程序设计基础到数据结构和算法的内容。</p><p>CS61A通常被认为是一门非常有挑战性但也非常有价值的课程，为学生提供了扎实的编程基础和计算机科学思维方式。</p><p>主要是用Python来掌握函数式编程、面向对象以及SQL等等</p><h2 id="二、OK自动评分器的使用"><a href="#二、OK自动评分器的使用" class="headerlink" title="二、OK自动评分器的使用"></a>二、OK自动评分器的使用</h2><p><code>py环境的配置我就不多提了，网上很多，我使用的是VS Code</code></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>写完函数，测试时要呼出终端，但方式不止一种，这是vs的一种方式<br><img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/1.png"></p><img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/2.png">也可以在文件夹中打开测评<img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/3.png"><img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/4.png"><img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/5.png"><img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/6.png"><p>测试代码一般在文档之中都有写：</p><img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/7.png"><img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/8.png"><p>后边加上 <strong>–local</strong>  表明在本地测试即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 ok -q falling --local</span><br><span class="line">python3 ok -q digit_distance --local</span><br></pre></td></tr></table></figure><h3 id="此外"><a href="#此外" class="headerlink" title="此外"></a>此外</h3><ol><li><p><a href="https://ok-help.cs61a.org/">okpy命令生成器</a></p></li><li><p>有一种情况是py版本太高，ok不适用了，降降版本就行了</p></li><li><p>如果输入代码后报错，也可能是文件解压格式后的地址不正确</p></li></ol><ul><li>“…\CS61A\hw\hw01\hw01.py”</li><li>“…\CS61A\lab\lab01\lab01.py”</li><li>“…\CS61A\proj\cats\cats.py”</li><li>“…\CS61A\hw\hw05\hw05\hw05.py”  （错误地址）<br>有的时候解压完毕可能出现，两个hw05，这时就报错了<img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/10.png"></li></ul><h2 id="三、期间遇到的一些难点"><a href="#三、期间遇到的一些难点" class="headerlink" title="三、期间遇到的一些难点"></a>三、期间遇到的一些难点</h2><p>我不会每个都有解析的，只是记录一下我学习时遇到的，每个人遇到的可能都不太一样，但还是希望帮助一下和我问题相似的同学<br>当然，也可以看看我的例子，分享分享你的解法<br>最后，希望各位同学勤于思考，不要太懒惰哦！</p><h3 id="写题时的方法"><a href="#写题时的方法" class="headerlink" title="写题时的方法"></a>写题时的方法</h3><p>这些题嘛倒不是很难，重要的是对题意的理解，以及上下文的分析</p><ol><li>因为是英文，所有你可能需要一款沉浸式翻译的插件<br><a href="https://immersivetranslate.com/download/?utm_source=extension&utm_medium=extension&utm_campaign=options_nav">沉浸式翻译插件网址</a></li><li>首先，要明白函数的大致作用</li><li>其次，联系上下文，明白函数接收的参数是什么，返回的是什么</li><li>接着，你要根据例子，逐步理解函数内部是如何对数据进行操作的</li><li>最后，你可以开始根据你的经验和知识构筑函数啦</li></ol><h3 id="hogs-Problem-8（make-averaged函数）"><a href="#hogs-Problem-8（make-averaged函数）" class="headerlink" title="hogs -&gt; Problem 8（make_averaged函数）"></a>hogs -&gt; Problem 8（make_averaged函数）</h3><p>我只是稍作分析哈！</p><ol><li>函数的作用：输入参数，调用original_function函数samples_count次，将其值累加汇总起来，求平均。需要注意的是original_function函数的运作，不然的话有些例子很难理解。</li><li>该函数接收：一个original_function函数，samples_count&#x3D;1000（调用original_function的次数）</li><li>返回：一个函数，这个局部函数接收与original_function函数，具有相同数量的参数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_averaged</span>(<span class="params">original_function, samples_count=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that returns the average value of ORIGINAL_FUNCTION</span></span><br><span class="line"><span class="string">    called SAMPLES_COUNT times.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To implement this function, you will have to use *args syntax.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; dice = make_test_dice(4, 2, 5, 1)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; averaged_dice = make_averaged(roll_dice, 40)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; averaged_dice(1, dice)  # The avg of 10 4&#x27;s, 10 2&#x27;s, 10 5&#x27;s, and 10 1&#x27;s</span></span><br><span class="line"><span class="string">    3.0    嗨嗨嗨：注意这里，例子过不去，就要再会过头去理解理解roll_dice函数了。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># BEGIN PROBLEM 8</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">average</span>(<span class="params">*args</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(samples_count):</span><br><span class="line">            count += original_function(*args)</span><br><span class="line">        <span class="keyword">return</span> count / samples_count</span><br><span class="line">    <span class="keyword">return</span> average</span><br><span class="line">    <span class="comment"># END PROBLEM 8</span></span><br></pre></td></tr></table></figure><hr><h3 id="cats-Problem-7-（minimum-mewtations函数）"><a href="#cats-Problem-7-（minimum-mewtations函数）" class="headerlink" title="cats -&gt; Problem 7 （minimum_mewtations函数）"></a>cats -&gt; Problem 7 （minimum_mewtations函数）</h3><ol><li>这个题使用了动态规划算法（DP），和贪心有点像，但每一步操作都和上一个状态有关</li><li>typed: 起始字符串，需要通过编辑操作变换成 source。<br> source: 目标字符串，我们希望 typed 变换成它。<br> limit: 编辑操作的上限。写的时间长，我也忘了为什么没用它就过了</li><li>dp我使用了二维数组，一个维度代表移除，一个添加，两个加起来就是替换了，是不是很妙</li><li>我好像疏忽了点什么，limit应该是提前结束的一个标志，一旦操作数超过limit就自动结束，但是这在二维表里很难操作，不加反而过了</li></ol><h4 id="解题步骤，首先你要明白这几点"><a href="#解题步骤，首先你要明白这几点" class="headerlink" title="解题步骤，首先你要明白这几点"></a>解题步骤，首先你要明白这几点</h4><ol><li>dp 数组（dp table）以及下标的含义<br> <code>dp[i][j]</code> 的含义：<code>dp[i][j]</code> 表示将 typed 的前 i 个字符转换为 source 的前 j 个字符所需的最少编辑次数。</li><li>确定递推公式<ul><li>递推公式：</li><li>如果 <code>dna1[i-1] == dna2[j-1]，则 dp[i][j] = dp[i-1][j-1]</code>，即不需要任何编辑操作。</li><li>如果 <code>dna1[i-1] != dna2[j-1]，则 dp[i][j]</code> 可以通过以下三种操作之一得到：<ul><li>替换：<code>dp[i-1][j-1] + 1</code></li><li>删除：<code>dp[i-1][j] + 1</code></li><li>插入：<code>dp[i][j-1] + 1</code></li></ul></li><li>所以，<code>dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1</code></li></ul></li><li>dp 数组如何初始化<ul><li>初始化：<ul><li><code>dp[0][j]</code> 表示将空字符串转换为 typed 的前 j 个字符，需要 j 次插入操作。</li><li><code>dp[i][0]</code> 表示将 source 的前 i 个字符转换为空字符串，需要 i 次删除操作。</li></ul></li></ul></li><li>确定遍历顺序<ul><li>遍历顺序：从左到右，从上到下。</li></ul></li><li>举例推导 dp 数组</li><li>结束条件<ul><li>对于 <code>dp[i][j] &lt;= limit</code>，即如果操作数超过 limit，则停止计算。<br> 【注】：可能很难操作</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minimum_mewtations</span>(<span class="params">typed, source, limit</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A diff function that computes the edit distance from TYPED to SOURCE.</span></span><br><span class="line"><span class="string">    This function takes in a string TYPED, a string SOURCE, and a number LIMIT.</span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        typed: a starting word</span></span><br><span class="line"><span class="string">        source: a string representing a desired goal word</span></span><br><span class="line"><span class="string">        limit: a number representing an upper bound on the number of edits</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; big_limit = 10</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; minimum_mewtations(&quot;cats&quot;, &quot;scat&quot;, big_limit)       # cats -&gt; scats -&gt; scat</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; minimum_mewtations(&quot;purng&quot;, &quot;purring&quot;, big_limit)   # purng -&gt; purrng -&gt; purring</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; minimum_mewtations(&quot;ckiteus&quot;, &quot;kittens&quot;, big_limit) # ckiteus -&gt; kiteus -&gt; kitteus -&gt; kittens</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a = <span class="built_in">len</span>(typed)</span><br><span class="line">    b = <span class="built_in">len</span>(source)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#初始化</span></span><br><span class="line">    dp = [[<span class="number">0</span>] * (b+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(a+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, b+<span class="number">1</span>):</span><br><span class="line">        dp[<span class="number">0</span>][i] = i</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, a+<span class="number">1</span>):</span><br><span class="line">        dp[i][<span class="number">0</span>] = i</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#执行判断</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, a):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, b):</span><br><span class="line">            <span class="keyword">if</span> typed[i] == source[j]:</span><br><span class="line">                dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = <span class="built_in">min</span>(dp[i][j] + <span class="number">1</span>,</span><br><span class="line">                                   dp[i][j+<span class="number">1</span>] + <span class="number">1</span>,</span><br><span class="line">                                   dp[i+<span class="number">1</span>][j] + <span class="number">1</span>)          </span><br><span class="line">    <span class="keyword">return</span> dp[a][b]</span><br></pre></td></tr></table></figure><hr><h3 id="Ants"><a href="#Ants" class="headerlink" title="Ants"></a>Ants</h3><p>Hello，别想着在这里找太多教程了！这个项目目的就是为了让你搞懂它的结构。你可能会遇到一些“小麻烦”，但别慌，解决方案都藏在源码里。其实，它没什么复杂的算法，更多的是需要你细心发掘。预祝各位在这趟项目之旅中一路顺风！如果实在需要帮助，不妨翻翻本仓库的Ants项目，阅读源码也是一种乐趣。Good Luck！</p><ul><li>self.place.bees： 一个实例所存在的地点，该地点所存在的bees，返回一个bees列表。</li><li>有些问题或许在父类中直接解决会更好。</li><li>当你在遍历一个列表的同时对其进行修改时，可能会导致某些元素被跳过，这是因为遍历时列表的长度和索引会发生变化。</li></ul><hr><h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><p>这是旅程的最后一次冒险，他并非看起来那么困难，你只需要耐心阅读代码，理解其中的逻辑，即可wandering through the code. 本仓库是你最坚强的后盾！</p><p>余者不再多提，我只强调两点：</p><ol><li><p>The first three parts：Pair类真的很重要，这涉及到一些格式问题，如果不能正确理解，你写出的代码可能无法运行。</p></li><li><p>Part IV： 函数嵌套而已，注意不要在question.scm里使用中文注释，否则会发生如下报错：</p> <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (<span class="name"><span class="built_in">load</span></span> <span class="symbol">&#x27;questions</span>)</span><br><span class="line">    Traceback (<span class="name">most</span> recent call last):</span><br><span class="line">    k (<span class="name">most</span> recent call last):</span><br><span class="line">    File <span class="string">&quot;E:\Desktop files\code\py\CS61A\proj\scheme\ok\client\sources\ok_test\scheme.py&quot;</span>, line <span class="number">58</span>, in evaluate</span><br><span class="line">        result = timer.timed(<span class="name">self.timeout</span>, self.scheme.scheme_eval,</span><br><span class="line">                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">    File <span class="string">&quot;E:\Desktop files\code\py\CS61A\proj\scheme\ok\client\utils\timer.py&quot;</span>, line <span class="number">33</span>, in timed</span><br><span class="line">        raise submission.error</span><br><span class="line">    File <span class="string">&quot;E:\Desktop files\code\py\CS61A\proj\scheme\ok\client\utils\timer.py&quot;</span>, line <span class="number">49</span>, in run</span><br><span class="line">        self.result = self.fn(<span class="name">*self.args</span>, **self.kargs)</span><br><span class="line">                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">    File <span class="string">&quot;E:\Desktop files\code\py\CS61A\proj\scheme\scheme_eval_apply.py&quot;</span>, line <span class="number">54</span>, in scheme_eval</span><br><span class="line">        return scheme_apply(<span class="name">procedure</span>, args, env)  # 应用操作符到参数</span><br><span class="line">            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">    File <span class="string">&quot;E:\Desktop files\code\py\CS61A\proj\scheme\scheme_eval_apply.py&quot;</span>, line <span class="number">75</span>, in scheme_apply</span><br><span class="line">        return procedure.py_func(<span class="name">*arr</span>)</span><br><span class="line">            ^^^^^^^^^^^^^^^^^^^^^^^</span><br><span class="line">    File <span class="string">&quot;E:\Desktop files\code\py\CS61A\proj\scheme\scheme_builtins.py&quot;</span>, line <span class="number">369</span>, in scheme_load</span><br><span class="line">        lines = infile.readlines()</span><br><span class="line">                ^^^^^^^^^^^^^^^^^^</span><br><span class="line">    UnicodeDecodeError: <span class="symbol">&#x27;gbk</span>&#x27; codec can<span class="symbol">&#x27;t</span> decode byte <span class="number">0</span>x80 in position <span class="number">390</span>: illegal multibyte sequence</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Hw4-Q3-Balanced"><a href="#Hw4-Q3-Balanced" class="headerlink" title="Hw4 -&gt; Q3: Balanced"></a>Hw4 -&gt; Q3: Balanced</h3><ol><li>移动式结构（Mobile）的定义：一个移动式结构由多个臂组成，每个臂可能悬挂一个行星（Planet）或另一个移动式结构（Mobile）。</li><li>平衡的定义：一个移动式结构被认为是平衡的，需要满足以下条件：<ul><li>左右两边的扭矩相等。</li><li>每个悬挂在臂端的移动式结构或行星本身也是平衡的。</li></ul></li><li>这个函数本身不难实现，难在对 arm 结构的理解 与 total_mass(), end()函数的应用,</li><li>实现不是很难，理解以上三个定义即可顺利写出，我就不多说了</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">arm</span>(<span class="params">length, mobile_or_planet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct an arm: a length of rod with a mobile or planet at the end.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> is_mobile(mobile_or_planet) <span class="keyword">or</span> is_planet(mobile_or_planet)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;arm&#x27;</span>, length, mobile_or_planet]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">balanced</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return whether m is balanced.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; t, u, v = examples()</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(t)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(v)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; p = mobile(arm(3, t), arm(2, u))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(p)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, v), arm(1, p)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; balanced(mobile(arm(1, p), arm(1, v)))</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; from construct_check import check</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; # checking for abstraction barrier violations by banning indexing</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;balanced&#x27;, [&#x27;Index&#x27;])</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> is_planet(m): <span class="comment"># termination condition</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="comment">#左右判断，加递归判断</span></span><br><span class="line">        left_mass =  total_mass(end(left(m))) * length(left(m))</span><br><span class="line">        right_mass = total_mass(end(right(m))) * length(right(m))</span><br><span class="line">        <span class="keyword">return</span> left_mass == right_mass <span class="keyword">and</span> balanced(end(left(m))) <span class="keyword">and</span> balanced(end(right(m)))</span><br></pre></td></tr></table></figure><hr><h3 id="Hw7-Q1-Pow"><a href="#Hw7-Q1-Pow" class="headerlink" title="Hw7 -&gt; Q1: Pow"></a>Hw7 -&gt; Q1: Pow</h3><ol><li><p>这道题的描述很难评，它大概是想要以下这种效果</p> <figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scm&gt; (<span class="name">pow-expr</span> <span class="number">2</span> <span class="number">0</span>)     <span class="comment">;case 1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">scm&gt; (<span class="name">pow-expr</span> <span class="number">2</span> <span class="number">1</span>)     <span class="comment">;case 2</span></span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">1</span>)</span><br><span class="line">scm&gt; (<span class="name">pow-expr</span> <span class="number">2</span> <span class="number">5</span>)     <span class="comment">;case 4 odd？ 奇数</span></span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name">square</span> (<span class="name">square</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line">scm&gt; (<span class="name">pow-expr</span> <span class="number">2</span> <span class="number">15</span>)    <span class="comment">;case 4</span></span><br><span class="line">(<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name">square</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name">square</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> (<span class="name">square</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">1</span>)))))))</span><br><span class="line"></span><br><span class="line">scm&gt; (<span class="name">pow-expr</span> <span class="number">2</span> <span class="number">16</span>)    <span class="comment">;case 3 even？ 偶数</span></span><br><span class="line">(<span class="name">square</span> (<span class="name">square</span> (<span class="name">square</span> (<span class="name">square</span> (<span class="name"><span class="built_in">*</span></span> <span class="number">2</span> <span class="number">1</span>)))))</span><br></pre></td></tr></table></figure><blockquote><p>以上描述来自 lab11 -&gt; Q3: Exponential Powers</p></blockquote></li><li><p>这就是个求幂的函数，你只需要逐步实现case1-4，简简单单？</p></li><li><p>写完这道题可以去看看 lab11 -&gt; Q3: Exponential Powers，差不多是一样的</p></li><li><p>哦，对了当情况为偶数时，(- exp 2)是不可取的，原因是太慢了会超时，望周知</p></li></ol><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">square</span> n) (<span class="name"><span class="built_in">*</span></span> n n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">pow</span> base exp) </span><br><span class="line">  (<span class="name"><span class="built_in">cond</span></span> </span><br><span class="line">    ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">0</span>) <span class="number">1</span>)</span><br><span class="line">    ((<span class="name"><span class="built_in">=</span></span> exp <span class="number">1</span>) base)</span><br><span class="line">    ((<span class="name"><span class="built_in">even?</span></span> exp) (<span class="name">square</span> (<span class="name">pow</span> base (<span class="name"><span class="built_in">/</span></span> exp <span class="number">2</span>)))) <span class="comment">;减少时间复杂度，避免超时</span></span><br><span class="line">    (<span class="name"><span class="built_in">else</span></span> (<span class="name"><span class="built_in">*</span></span> base (<span class="name">pow</span> base (<span class="name"><span class="built_in">-</span></span> exp <span class="number">1</span>)))))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h3 id="Lab10-Q2-Q3-Q4"><a href="#Lab10-Q2-Q3-Q4" class="headerlink" title="Lab10 -&gt; Q2,Q3,Q4"></a>Lab10 -&gt; Q2,Q3,Q4</h3><ol><li>这题说难也不难，你需要多揣摩，毕竟只是填代码，有时候直觉也可以得出答案</li><li>先说有几种情况：<br> a. exp是Pair类型<br> b. exp在OPERATORS（字典）里，转化为所需函数名<br> c. int&#x2F;bool类型 直接输出<br> d. exp在bindings（字典）里，替换成数值输出</li><li>case a 细分<ul><li>operator is and 逻辑操作符</li><li>operator is define 关键字</li><li>余下的情况就是需要有一个统一的处理，涉及calc_apply(op, args), 被包含在了OPERATORS字典里<blockquote><p>OPERATORS &#x3D; { “&#x2F;&#x2F;“: floor_div, “+”: addition, “-“: subtraction, “*”: multiplication, “&#x2F;“: division }</p></blockquote></li></ul></li><li>operands.map(calc_eval)很重要，快去搜一下map的作用，再揣摩一下代码吧</li><li>逻辑已经有了，我还需要一步步实现嘛？！加油！！</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc_eval</span>(<span class="params">exp</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; calc_eval(Pair(&quot;define&quot;, Pair(&quot;a&quot;, Pair(1, nil))))</span></span><br><span class="line"><span class="string">    &#x27;a&#x27;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; calc_eval(&quot;a&quot;)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; calc_eval(Pair(&quot;+&quot;, Pair(1, Pair(2, nil))))</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(exp, Pair):</span><br><span class="line">        operator = exp.first <span class="comment"># exp的第一个操作数</span></span><br><span class="line">        operands = exp.rest <span class="comment"># exp余下的数据</span></span><br><span class="line">        <span class="keyword">if</span> operator == <span class="string">&#x27;and&#x27;</span>: </span><br><span class="line">            <span class="keyword">return</span> eval_and(operands)</span><br><span class="line">        <span class="keyword">elif</span> operator == <span class="string">&#x27;define&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> eval_define(operands)</span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            <span class="keyword">return</span> calc_apply(calc_eval(operator), operands.<span class="built_in">map</span>(calc_eval)) <span class="comment"># UPDATE THIS FOR Q2</span></span><br><span class="line">    <span class="keyword">elif</span> exp <span class="keyword">in</span> OPERATORS:   <span class="comment"># Looking up procedures</span></span><br><span class="line">        <span class="keyword">return</span> OPERATORS[exp]</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(exp, <span class="built_in">int</span>) <span class="keyword">or</span> <span class="built_in">isinstance</span>(exp, <span class="built_in">bool</span>):   <span class="comment"># Numbers and booleans</span></span><br><span class="line">        <span class="keyword">return</span> exp</span><br><span class="line">    <span class="keyword">elif</span> exp <span class="keyword">in</span> bindings: <span class="comment"># CHANGE THIS CONDITION FOR Q4</span></span><br><span class="line">        <span class="keyword">return</span> bindings[exp] <span class="comment"># UPDATE THIS FOR Q4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_apply</span>(<span class="params">op, args</span>):</span><br><span class="line">    <span class="keyword">return</span> op(args)</span><br></pre></td></tr></table></figure><hr><h3 id="lab12-and-hw10-SQL"><a href="#lab12-and-hw10-SQL" class="headerlink" title="lab12 and hw10 (SQL)"></a>lab12 and hw10 (SQL)</h3><ol><li>如果你和我一样先完成了 HW 10，可能会感到有些困惑。不过，回过头来看 Lab 12，你会恍然大悟，因为基础语法和项目的完成方法在 Lab 12 中都有详细说明。</li><li>这一部分的目的是让大家初步了解 SQL 数据库语言的使用，从逻辑上来说并不复杂，主要是对基础语法的运用。因此，理解它们将对你的学习大有裨益。</li><li>建议先进行 lab12</li></ol><blockquote><p>以下是一份可能会用到的语法的说明，希望对你有所帮助：</p></blockquote><ul><li><strong><code>SELECT</code></strong>: 指定要查询的列。</li><li><strong><code>FROM</code></strong>: 指定查询的数据表。</li><li><strong><code>INNER JOIN ... ON</code></strong>: 连接两个表，并指定连接条件。</li><li><strong><code>WHERE</code></strong>: 筛选满足特定条件的记录。</li><li><strong><code>GROUP BY</code></strong>: 将结果按指定列分组，以便进行聚合计算。</li><li><strong><code>HAVING</code></strong>: 对分组后的结果应用条件，通常用于聚合函数。</li><li><strong><code>ORDER BY</code></strong>: 指定结果集的排序方式。<ul><li><strong>ASC</strong>: 表示按升序排序。</li><li><strong>DESC</strong>: 表示按降序排序。</li></ul></li><li><strong><code>AS</code></strong>: 用于给列或表起别名。</li><li><strong><code>MAX()</code></strong>, <strong><code>MIN()</code></strong>, <strong><code>AVG()</code></strong>: 聚合函数，用于计算最大值、最小值和平均值，这样的函数还有很多。</li></ul><blockquote><p>如果仍有语法疑问，这个网站可能会帮到你 <a href="https://www.runoob.com/sql/sql-tutorial.html">SQL</a></p></blockquote><p>接下来，我将给出一个实例，来展示SQL中基础语法的使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建 departments 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> departments (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,              <span class="comment">-- 部门 ID</span></span><br><span class="line">    department_name <span class="type">VARCHAR</span>(<span class="number">50</span>)      <span class="comment">-- 部门名称</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入示例数据到 departments 表</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> departments (id, department_name) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;人力资源&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;技术支持&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;市场营销&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;财务部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 employees 表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,               <span class="comment">-- 员工 ID</span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),                 <span class="comment">-- 员工姓名</span></span><br><span class="line">    salary <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>),            <span class="comment">-- 员工薪资</span></span><br><span class="line">    department_id <span class="type">INT</span>,                <span class="comment">-- 部门 ID</span></span><br><span class="line">    status <span class="type">VARCHAR</span>(<span class="number">20</span>)                <span class="comment">-- 员工状态</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入示例数据到 employees 表</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees (id, name, salary, department_id, status) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">60000</span>, <span class="number">1</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="number">55000</span>, <span class="number">1</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="number">70000</span>, <span class="number">2</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="number">40000</span>, <span class="number">2</span>, <span class="string">&#x27;inactive&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;钱七&#x27;</span>, <span class="number">80000</span>, <span class="number">3</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;孙八&#x27;</span>, <span class="number">30000</span>, <span class="number">3</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;周九&#x27;</span>, <span class="number">90000</span>, <span class="number">4</span>, <span class="string">&#x27;active&#x27;</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;吴十&#x27;</span>, <span class="number">50000</span>, <span class="number">4</span>, <span class="string">&#x27;inactive&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    d.department_name <span class="keyword">AS</span> department_name,  <span class="comment">-- 选择部门名称，并重命名为 department_name</span></span><br><span class="line">    <span class="built_in">MAX</span>(e.salary) <span class="keyword">AS</span> max_salary,           <span class="comment">-- 获取该部门的最高薪资，重命名为 max_salary</span></span><br><span class="line">    <span class="built_in">MIN</span>(e.salary) <span class="keyword">AS</span> min_salary,           <span class="comment">-- 获取该部门的最低薪资，重命名为 min_salary</span></span><br><span class="line">    <span class="built_in">AVG</span>(e.salary) <span class="keyword">AS</span> avg_salary             <span class="comment">-- 获取该部门的平均薪资，重命名为 avg_salary</span></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    employees e                             <span class="comment">-- 从 employees 表中选择数据，并将其简写为 e</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    departments d <span class="keyword">ON</span> e.department_id <span class="operator">=</span> d.id  <span class="comment">-- 内连接 departments 表，通过部门 ID 进行连接</span></span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    e.status <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>                     <span class="comment">-- 仅选择状态为 &#x27;active&#x27; 的员工</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    d.department_name                        <span class="comment">-- 按部门名称分组</span></span><br><span class="line"><span class="keyword">HAVING</span> </span><br><span class="line">    <span class="built_in">AVG</span>(e.salary) <span class="operator">&gt;</span> <span class="number">50000</span>                   <span class="comment">-- 仅保留平均薪资大于 50000 的部门</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    avg_salary <span class="keyword">DESC</span>;                        <span class="comment">-- 按照平均薪资降序排列结果</span></span><br></pre></td></tr></table></figure><h2 id="四、我认为值得注意的地方"><a href="#四、我认为值得注意的地方" class="headerlink" title="四、我认为值得注意的地方"></a>四、我认为值得注意的地方</h2><ol><li>C++与py中逻辑运算符的差别</li><li>条件运算符的使用（”x is greater” if x &gt; y else “y is greater”）</li><li>这里gcd的实现（同时赋值（tuple unpacking））<img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/9.png"></li><li>如何快速准确构建递归抽象</li><li>先转化为柯里化函数，再使用，有什么好处</li><li>你对于scheme中的 括号的使用 有什么想法， 用不好会这样报错 <img src="/2024/08/08/CS61A-2024-%E5%AD%A6%E4%B9%A0%E5%8E%86%E7%A8%8B/11.png"></li><li>scheme中，引号与准引号的用法，与py中f{value}相似</li><li>概念是相似的，语言是不同的，但相同的概念在不同的语言中都有展现</li><li>先模仿，再创造，最终超越，如果是初学者，碰到难以理解的也是正常的</li><li>期间遇到的报错，你是否能独自解决呢，要合理利用互联网资源哦！</li><li>有时知识付费，是一件很值得的事情。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本人较菜，有疏漏的地方请及时反馈，多多包涵呦！我的旅程已经结束，各位旅行者们，且行且珍惜！</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python - CS61 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ and Py</title>
      <link href="/2024/07/18/C++%20and%20Py/"/>
      <url>/2024/07/18/C++%20and%20Py/</url>
      
        <content type="html"><![CDATA[<p>学习CS61A课程中所发现C++和Python语法的一些小差别。</p><span id="more"></span><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="符号不同"><a href="#符号不同" class="headerlink" title="符号不同"></a>符号不同</h3><p>逻辑与 (&amp;&amp; in C++, and in Python): 当且仅当两个操作数都为真时，结果为真。<br>逻辑或 (|| in C++, or in Python): 当至少有一个操作数为真时，结果为真。<br>逻辑非 (! in C++, not in Python): 用来反转操作数的逻辑状态。如果操作数为真，则结果为假，反之亦然。</p><h3 id="返回值不同"><a href="#返回值不同" class="headerlink" title="返回值不同"></a>返回值不同</h3><p>C++中的逻辑运算符的返回值是bool类型，总是true或false。</p><blockquote><p>Python 中的逻辑运算符 and 和 or 返回的不是布尔值，而是它们操作数中的一个值。<br>(and)：如果第一个操作数为真，则返回第二个操作数的值；如果第一个操作数为假，则返回第一个操作数的值。<br>(or)：如果第一个操作数为真，则返回第一个操作数的值；如果第一个操作数为假，则返回第二个操作数的值。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> <span class="keyword">and</span> <span class="number">13</span></span><br><span class="line">______13</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">False</span> <span class="keyword">or</span> <span class="number">0</span></span><br><span class="line">______0</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="number">10</span></span><br><span class="line">______<span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">______<span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> <span class="keyword">and</span> <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">______Error (ZeroDivisionError)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span> <span class="keyword">or</span> <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">______<span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>-<span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span> &gt; <span class="number">0</span></span><br><span class="line">______<span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>-<span class="number">1</span> <span class="keyword">or</span> <span class="number">5</span></span><br><span class="line">______-<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">1</span> + <span class="number">1</span>) <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line">______1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="number">3</span>) <span class="keyword">or</span> <span class="string">&quot;&quot;</span></span><br><span class="line">______3</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">&quot;zero&quot;</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">elif</span> x &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">&quot;positive&quot;</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">or</span> f(<span class="number">1</span>)</span><br><span class="line">______<span class="string">&#x27;positive&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">0</span>) <span class="keyword">or</span> f(-<span class="number">1</span>)</span><br><span class="line">______<span class="string">&#x27;zero&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">0</span>) <span class="keyword">and</span> f(-<span class="number">1</span>)</span><br><span class="line">______<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>接下来我直接给出代码上的例子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//condition ? value_if_true : value_if_false;</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> y = <span class="number">10</span>;</span><br><span class="line">    std::string result = (x &gt; y) ? <span class="string">&quot;x is greater&quot;</span> : <span class="string">&quot;y is greater&quot;</span>;</span><br><span class="line">    std::cout &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#value_if_true if condition else value_if_false</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">y = <span class="number">10</span></span><br><span class="line">result = <span class="string">&quot;x is greater&quot;</span> <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> <span class="string">&quot;y is greater&quot;</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="奇妙的语法"><a href="#奇妙的语法" class="headerlink" title="奇妙的语法"></a>奇妙的语法</h2><p>我在编写py中求最小公倍数的代码时，发现了一个奇妙的语法。</p><blockquote><p>且看gcd的实现</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">c, d</span>):</span><br><span class="line">            <span class="keyword">while</span> d != <span class="number">0</span>:</span><br><span class="line">                c, d = d, c % d</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p>c, d &#x3D; d, c % d</p></blockquote><p>这种实现比 C++ 的实现少了一个中间变量<br>这是因为Python 支持同时赋值（tuple unpacking），可以在一行内交换变量值，这使得代码更加简洁和直接。</p><blockquote><ul><li>while d !&#x3D; 0: 循环用于执行欧几里德算法，直到 d 等于 0。</li><li>c, d &#x3D; d, c % d 是 Python 特有的语法，它在一行内完成了两个操作：</li><li>计算 c % d 并将结果赋给 d。</li><li>将原来的 d 赋给 c。 这样就实现了交换变量的操作，而不需要像 C++ 那样使用一个额外的变量来暂存中间结果。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考试周有感</title>
      <link href="/2024/06/29/%E8%80%83%E8%AF%95%E5%91%A8%E6%9C%89%E6%84%9F/"/>
      <url>/2024/06/29/%E8%80%83%E8%AF%95%E5%91%A8%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<p>大学生在考试周中的厉害之处在于，即使不清楚问题本质，也能妥善的应试化解决。</p>]]></content>
      
      
      <categories>
          
          <category> 日有所感 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构：常见排序算法解析</title>
      <link href="/2024/06/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/"/>
      <url>/2024/06/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>因为我经常忘记各种排序算法的思路，所以我写了这篇文章。文章中使用了结构体数组来实现排序，已经完成了快排、希尔等多种排序方法，值得一提的是，我采用了 <code>arr[0] = &#123;&#125;</code> 这样的方式来置空数组，并将其作为标兵来使用。</p><span id="more"></span><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>（1）直接插入排序；<br>（2）折半插入排序；<br>（3）冒泡排序；<br>（4）简单选择排序。<br>（5）希尔排序；<br>（6）快速排序。</p><p>首先我先定义一下排序需要用到的…ababab</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    string name;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印排序后的数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudents</span><span class="params">(<span class="type">const</span> Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; students[i].name &lt;&lt; <span class="string">&quot;  成绩：&quot;</span> &lt;&lt; students[i].score &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Student students[] = &#123;</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;aaa&quot;</span>, <span class="number">87</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;bbb&quot;</span>, <span class="number">76</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;ccc&quot;</span>, <span class="number">92</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;ddd&quot;</span>, <span class="number">64</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;eee&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;fff&quot;</span>, <span class="number">78</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;ggg&quot;</span>, <span class="number">100</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;hhh&quot;</span>, <span class="number">43</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> size = <span class="built_in">sizeof</span>(students) / <span class="built_in">sizeof</span>(students[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printStudents</span>(students, size);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// insert(students, size);</span></span><br><span class="line"><span class="comment">// binary(students, size);</span></span><br><span class="line"><span class="comment">// bubble(students, size);</span></span><br><span class="line"><span class="comment">// selection(students, size);</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// quickSort(students, 1, size);</span></span><br><span class="line"><span class="comment">// cout &lt;&lt; &quot;快速排序：&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// printStudents(students, size);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">shell</span>(students, size, size); </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>首先取第一个元素假设这个范围内有序（升序），<br>接着扩大这个范围，由1到n,<br>始终保持范围内有序，最终完成排序。</p><p><a href="https://www.bilibili.com/video/BV1CY4y1t7TZ?vd_source=552d8dff5a9194c361aac3f70e8ffeee">动画演示链接</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里假设前i-1个元素有序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; size; i++) &#123;</span><br><span class="line">    <span class="comment">//中转变量，存储即将进入有序区域的数据</span></span><br><span class="line"></span><br><span class="line">        Student tmp = students[i];</span><br><span class="line">        <span class="type">int</span> j = i<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里 j = 0 时，students[j].score &gt; tmp.score 必定为false</span></span><br><span class="line">        <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; students[j].score &gt; tmp.score) &#123;</span><br><span class="line">            students[j + <span class="number">1</span>] = students[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        students[j + <span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;直接插入排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><h5 id="a-算法性能"><a href="#a-算法性能" class="headerlink" title="a.算法性能"></a>a.算法性能</h5><p>时间复杂度：平均（O(n^2)）<br>空间复杂度：额外空间复杂度是 ( O(1) )</p><h5 id="b-稳定性-稳定性是指排序过程中相同元素的相对位置不变"><a href="#b-稳定性-稳定性是指排序过程中相同元素的相对位置不变" class="headerlink" title="b.稳定性(稳定性是指排序过程中相同元素的相对位置不变)"></a>b.稳定性(稳定性是指排序过程中相同元素的相对位置不变)</h5><p>直接插入排序是稳定的排序算法，因此如果原始数组中存在相同值的元素，在排序后它们的相对顺序不会改变。</p><h5 id="c-适用性"><a href="#c-适用性" class="headerlink" title="c.适用性"></a>c.适用性</h5><p>相比较于其他 ( O(n^2) ) 的排序算法（如冒泡排序和选择排序），直接插入排序在一般情况下效率更高，特别是在数据部分有序的情况下。<br>然而，对于大规模数据或需要快速排序的情况，更高效的排序算法（如快速排序、归并排序等 ( O(n \log n) ) 的算法）更为合适。</p><h5 id="d-总结"><a href="#d-总结" class="headerlink" title="d.总结"></a>d.总结</h5><p>直接插入排序虽然简单，但其性能上不如快速排序等 ( O(n \log n) ) 级别的排序算法。然而，它易于实现，在小规模数据或者数据接近有序时，可以是一个不错的选择。</p><hr><h3 id="折半插入排序算法"><a href="#折半插入排序算法" class="headerlink" title="折半插入排序算法"></a>折半插入排序算法</h3><h4 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>折半插入排序与直接插入排序类似，但在寻找插入位置时采用了二分查找的方式，以提高查找插入位置的效率。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">binary</span><span class="params">(Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; size; i++) &#123;</span><br><span class="line">        Student tmp = students[i];</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right = i<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">         <span class="comment">//这样可以防止溢出，虽然这里用不到吧</span></span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(students[mid].score &gt; tmp.score) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//虽然这样查找的比较快，但是还是要遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &gt; left; j--) &#123;  </span><br><span class="line">            students[j] = students[j<span class="number">-1</span>]; </span><br><span class="line">        &#125;</span><br><span class="line">        students[left] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;折半插入排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h4><h5 id="a-算法性能-1"><a href="#a-算法性能-1" class="headerlink" title="a. 算法性能"></a>a. 算法性能</h5><p>时间复杂度：平均情况下 ( O(n^2) )，虽然查找插入位置的过程利用了二分查找，但插入操作仍然是 ( O(n) )。<br>空间复杂度：额外空间复杂度为 ( O(1) )</p><h5 id="b-稳定性"><a href="#b-稳定性" class="headerlink" title="b. 稳定性"></a>b. 稳定性</h5><p>折半插入排序同样是稳定的排序算法，相同元素的相对位置不会改变。</p><h5 id="c-适用性-1"><a href="#c-适用性-1" class="headerlink" title="c. 适用性"></a>c. 适用性</h5><p>折半插入排序适用于需要<strong>稳定排序</strong>且<strong>对空间复杂度有要求</strong>的场景，特别是<strong>当直接插入排序在查找插入位置上效率较低</strong>时，折半插入排序可以提供更好的性能。</p><h5 id="d-总结-1"><a href="#d-总结-1" class="headerlink" title="d. 总结"></a>d. 总结</h5><p>折半插入排序相比直接插入排序，在查找插入位置时能够更快地定位，但整体的时间复杂度仍然是 ( O(n^2) )，因此对于大规模数据或需要更高效排序算法的情况，应考虑使用 ( O(n \log n) ) 级别的排序算法，如快速排序或归并排序。</p><hr><h3 id="冒泡排序算法"><a href="#冒泡排序算法" class="headerlink" title="冒泡排序算法"></a>冒泡排序算法</h3><h4 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>从第一个元素开始，依次比较相邻的两个元素，如果顺序不对则交换它们。<br>继续对每一对相邻元素进行同样的操作，直到最后一个元素。<br>重复以上步骤，每次都将未排序部分中最大的元素”浮”到最后，直到整个序列有序。</p><p><a href="https://www.bilibili.com/video/BV1CY4y1t7TZ?p=2&vd_source=552d8dff5a9194c361aac3f70e8ffeee">动画演示链接</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble</span><span class="params">(Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; size - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(students[j].score &gt; students[j+<span class="number">1</span>].score) &#123;</span><br><span class="line"><span class="built_in">swap</span>(students[j], students[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printStudents(students, size);</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;冒泡排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="算法分析-2"><a href="#算法分析-2" class="headerlink" title="算法分析"></a>算法分析</h4><h5 id="a-算法性能-2"><a href="#a-算法性能-2" class="headerlink" title="a. 算法性能"></a>a. 算法性能</h5><p>时间复杂度：O(n^2)<br>空间复杂度：额外空间复杂度为 ( O(1) )</p><h5 id="b-稳定性-1"><a href="#b-稳定性-1" class="headerlink" title="b. 稳定性"></a>b. 稳定性</h5><p>冒泡排序是稳定的排序算法。在比较相邻元素时，如果他们的值相等，则不进行交换，因此相等的元素在排序后的相对位置保持不变。</p><h5 id="c-总结"><a href="#c-总结" class="headerlink" title="c. 总结"></a>c. 总结</h5><p>由于其实现简单且易于理解，在一些教学场景中仍然被广泛使用。实际并不常用。</p><hr><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><h4 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>首先在未排序序列中找到最小（或最大）元素，存放到排序序列的起始位置<br>然后，再从剩余未排序元素中继续寻找最小（或最大）元素，放到已排序序列的末尾<br>以此类推，直到所有元素均排序完毕</p><p><a href="https://www.bilibili.com/video/BV1CY4y1t7TZ?p=3&vd_source=552d8dff5a9194c361aac3f70e8ffeee">动画演示链接</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">selection</span><span class="params">(Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> min_score = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(students[min_score].score &gt; students[j].score) &#123;</span><br><span class="line">min_score = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(students[i], students[min_score]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;简单选择排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-3"><a href="#算法分析-3" class="headerlink" title="算法分析"></a>算法分析</h4><h5 id="a-算法性能-3"><a href="#a-算法性能-3" class="headerlink" title="a. 算法性能"></a>a. 算法性能</h5><p>时间复杂度：O(n^2)<br>空间复杂度：额外空间复杂度为 ( O(1) )</p><h5 id="b-稳定性-2"><a href="#b-稳定性-2" class="headerlink" title="b. 稳定性"></a>b. 稳定性</h5><p>简单选择排序是不稳定的排序算法。在寻找最小（或最大）元素的过程中，如果有多个相等的元素，那么可能会破坏它们之间的相对顺序。</p><h5 id="c-总结-1"><a href="#c-总结-1" class="headerlink" title="c. 总结"></a>c. 总结</h5><p>由于其实现简单且易于理解，在一些教学场景中仍然被广泛使用。实际并不常用。</p><hr><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="算法步骤-4"><a href="#算法步骤-4" class="headerlink" title="算法步骤"></a>算法步骤</h4><p><strong>选择增量序列</strong>：希尔排序的关键在于选择合适的增量序列（也称为间隔序列），初始时，选择一个增量h（通常选择数组长度的一半，即 h &#x3D; n &#x2F; 2，n为数组长度），然后逐步减小增量。</p><p><strong>分组排序</strong>：对于当前的增量h，将待排序的数组分成h个长度为n&#x2F;h的子数组（如果n不能被h整除，则最后一个子数组的长度会小于n&#x2F;h）。<br>对每个子数组进行直接插入排序。此时，由于每个子数组中的元素间隔为h，因此只需要考虑每隔h个元素的比较和移动。</p><p><strong>逐步减小增量</strong>：在完成一轮分组排序后，减小增量h的值（如 h &#x3D; h &#x2F; 2），并重复步骤2，直到h变为1。</p><p><strong>最后排序</strong>：当h变为1时，整个数组被分为n个长度为1的子数组（即每个元素自成一组）。此时，再对整个数组进行一次直接插入排序，即可得到完全有序的数组。</p><p><a href="https://www.bilibili.com/video/BV1CY4y1t7TZ?p=20&vd_source=552d8dff5a9194c361aac3f70e8ffeee">动画演示链接</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell</span><span class="params">(Student students[], <span class="type">int</span> size, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 逐步缩小间隔直到间隔为1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用间隔进行插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">            Student tmp = students[i];</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            <span class="comment">// 在当前间隔内进行插入排序·</span></span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; students[j - gap].score &gt; tmp.score; j -= gap) &#123;</span><br><span class="line">                students[j] = students[j - gap];</span><br><span class="line">            &#125;</span><br><span class="line">            students[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;希尔排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-4"><a href="#算法分析-4" class="headerlink" title="算法分析"></a>算法分析</h4><h5 id="a-算法性能-4"><a href="#a-算法性能-4" class="headerlink" title="a. 算法性能"></a>a. 算法性能</h5><p>时间复杂度：希尔排序的时间复杂度很难准确计算，因为它与数据序列的初始状态以及增量序列的选择都有关。<br>空间复杂度：额外空间复杂度为 ( O(1) )</p><h5 id="b-稳定性-3"><a href="#b-稳定性-3" class="headerlink" title="b. 稳定性"></a>b. 稳定性</h5><p>希尔排序是不稳定的排序算法。在增量大于1的排序过程中，相同元素的相对位置可能会发生变化</p><h5 id="c-总结-2"><a href="#c-总结-2" class="headerlink" title="c. 总结"></a>c. 总结</h5><p>希尔排序在实际应用中并不常见，因为它通常不如快速排序、归并排序等算法高效。希尔排序的优点是代码实现简单，且在某些特定情况下（如数据基本有序时）效率较高。</p><hr><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="算法步骤-5"><a href="#算法步骤-5" class="headerlink" title="算法步骤"></a>算法步骤</h4><p><strong>选择基准（Pivot）</strong>：从待排序的序列中选取一个元素作为基准（pivot），通常选择序列的第一个或最后一个元素，或者随机选择。</p><p><strong>分割过程（Partition）</strong>：将待排序的序列重新排列，所有比基准值小的元素放在基准的前面，所有比基准值大的元素放在基准的后面。在这个分割过程之后，基准元素处于序列的中间位置（左侧的所有元素都比它小，右侧的所有元素都比它大）。这个过程称为一次划分（Partition）。</p><p><strong>递归处理</strong>：递归地对基准元素左右两侧的子序列进行快速排序，直到每个子序列的长度为1（即已经有序），递归结束。</p><p><a href="https://www.bilibili.com/video/BV1CY4y1t7TZ?p=13&vd_source=552d8dff5a9194c361aac3f70e8ffeee">动画演示链接</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">quick</span><span class="params">(Student students[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">Student tmp = students[left];</span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; students[right].score &gt;= tmp.score)</span><br><span class="line">right--;</span><br><span class="line">students[left] = students[right];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; students[left].score &lt;= tmp.score)</span><br><span class="line">left++;</span><br><span class="line">students[right] = students[left];</span><br><span class="line">&#125;</span><br><span class="line">students[left] = tmp;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(Student students[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> pi = <span class="built_in">quick</span>(students, left, right);</span><br><span class="line"><span class="built_in">quickSort</span>(students, left, pi - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">quickSort</span>(students, pi + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法分析-5"><a href="#算法分析-5" class="headerlink" title="算法分析"></a>算法分析</h4><h5 id="a-算法性能-5"><a href="#a-算法性能-5" class="headerlink" title="a. 算法性能"></a>a. 算法性能</h5><p>时间复杂度：O(n log n)<br>空间复杂度：额外空间复杂度为 O(log n)。</p><h5 id="b-稳定性-4"><a href="#b-稳定性-4" class="headerlink" title="b. 稳定性"></a>b. 稳定性</h5><p>快速排序是不稳定的排序算法，即相等的元素在排序后可能会改变它们的相对顺序。</p><h5 id="c-总结-3"><a href="#c-总结-3" class="headerlink" title="c. 总结"></a>c. 总结</h5><p>快速排序算法由于其高效性和广泛的适用性，在多个领域都有着广泛的应用。</p><h3 id="代码全貌"><a href="#代码全貌" class="headerlink" title="代码全貌"></a>代码全貌</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudents</span><span class="params">(<span class="type">const</span> Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; students[i].name &lt;&lt; <span class="string">&quot;  成绩：&quot;</span> &lt;&lt; students[i].score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; size; i++) &#123;</span><br><span class="line">Student tmp = students[i];</span><br><span class="line"><span class="type">int</span> j = i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; students[j].score &gt; tmp.score) &#123;</span><br><span class="line">students[j + <span class="number">1</span>] = students[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">students[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;直接插入排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">binary</span><span class="params">(Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; size; i++) &#123;</span><br><span class="line">        Student tmp = students[i];</span><br><span class="line">        <span class="type">int</span> left = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right = i<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(students[mid].score &gt; tmp.score) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &gt; left; j--) &#123;  </span><br><span class="line">            students[j] = students[j<span class="number">-1</span>]; </span><br><span class="line">        &#125;</span><br><span class="line">        students[left] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;折半插入排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubble</span><span class="params">(Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; size - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(students[j].score &gt; students[j+<span class="number">1</span>].score) &#123;</span><br><span class="line"><span class="built_in">swap</span>(students[j], students[j+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printStudents(students, size);</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;冒泡排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selection</span><span class="params">(Student students[], <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> min_score = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(students[min_score].score &gt; students[j].score) &#123;</span><br><span class="line">min_score = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(students[i], students[min_score]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;简单选择排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shell</span><span class="params">(Student students[], <span class="type">int</span> size, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 逐步缩小间隔直到间隔为1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用间隔进行插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">            Student tmp = students[i];</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            <span class="comment">// 在当前间隔内进行插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; students[j - gap].score &gt; tmp.score; j -= gap) &#123;</span><br><span class="line">                students[j] = students[j - gap];</span><br><span class="line">            &#125;</span><br><span class="line">            students[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;希尔排序：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printStudents</span>(students, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quick</span><span class="params">(Student students[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">Student tmp = students[left];</span><br><span class="line"><span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; students[right].score &gt;= tmp.score)</span><br><span class="line">right--;</span><br><span class="line">students[left] = students[right];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; students[left].score &lt;= tmp.score)</span><br><span class="line">left++;</span><br><span class="line">students[right] = students[left];</span><br><span class="line">&#125;</span><br><span class="line">students[left] = tmp;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(Student students[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> pi = <span class="built_in">quick</span>(students, left, right);</span><br><span class="line"><span class="built_in">quickSort</span>(students, left, pi - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">quickSort</span>(students, pi + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student students[] = &#123;</span><br><span class="line">&#123;&#125;,</span><br><span class="line">&#123;<span class="string">&quot;aaa&quot;</span>, <span class="number">87</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;bbb&quot;</span>, <span class="number">76</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;ccc&quot;</span>, <span class="number">92</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;ddd&quot;</span>, <span class="number">64</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;eee&quot;</span>, <span class="number">55</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;fff&quot;</span>, <span class="number">78</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;ggg&quot;</span>, <span class="number">100</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;hhh&quot;</span>, <span class="number">43</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = <span class="built_in">sizeof</span>(students) / <span class="built_in">sizeof</span>(students[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printStudents</span>(students, size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//insert(students, size);</span></span><br><span class="line"><span class="comment">//binary(students, size);</span></span><br><span class="line"><span class="comment">//bubble(students, size);</span></span><br><span class="line"><span class="comment">//selection(students, size);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//quickSort(students, 1, size);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;快速排序：&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//printStudents(students, size);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">shell</span>(students, size, size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 排序算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初窥线性代数的本质（一）</title>
      <link href="/2024/05/30/%E5%88%9D%E7%AA%A5%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/05/30/%E5%88%9D%E7%AA%A5%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%9A%84%E6%9C%AC%E8%B4%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>这是一篇观3Blue1Brown大神线代视频讲解有感。</p><span id="more"></span><h2 id="向量究竟是什么"><a href="#向量究竟是什么" class="headerlink" title="向量究竟是什么"></a>向量究竟是什么</h2><ul><li><p><strong>物理学家观点：</strong></p><ul><li>向量是一个矢量，有长度、方向，可以随意移动，以二维或三维在坐标系中存在</li></ul></li><li><p><strong>数学家观点：</strong></p><ul><li>向量是抽象的、通用的，只需要保证满足<ul><li>向量加法</li><li>向量之间的数乘</li></ul></li></ul></li><li><p><strong>计算机学家观点：</strong></p><ul><li>向量是有序的数字列表，维度等于列表的长度</li></ul></li></ul><h2 id="线性组合、张成的空间与基"><a href="#线性组合、张成的空间与基" class="headerlink" title="线性组合、张成的空间与基"></a>线性组合、张成的空间与基</h2><h3 id="a-线性组合"><a href="#a-线性组合" class="headerlink" title="a.线性组合"></a>a.线性组合</h3><p>空间中不共线的两个不为零向量都可以表示空间中的任意一个向量</p><h3 id="b-空间的基"><a href="#b-空间的基" class="headerlink" title="b.空间的基"></a>b.空间的基</h3><p>向量中的基底</p><h3 id="c-张成的空间"><a href="#c-张成的空间" class="headerlink" title="c.张成的空间"></a>c.张成的空间</h3><p>基底所能组成的平面或立体空间</p><h3 id="d-线性相关"><a href="#d-线性相关" class="headerlink" title="d.线性相关"></a>d.线性相关</h3><p>有多个向量，移除其中一个向量而不减小其所张成的平面或空间，就称他们为线性相关</p><h2 id="矩阵与线性变换"><a href="#矩阵与线性变换" class="headerlink" title="矩阵与线性变换"></a>矩阵与线性变换</h2><h3 id="a-线性变换"><a href="#a-线性变换" class="headerlink" title="a.线性变换"></a>a.线性变换</h3><ul><li>原点保持固定</li><li>直线在变换后仍然保持为直线</li></ul><h3 id="b-矩阵"><a href="#b-矩阵" class="headerlink" title="b.矩阵"></a>b.矩阵</h3><ul><li>矩阵是对坐标轴上的基进行变换，并在最后作用在向量坐标上（旋转，剪切）</li></ul><h2 id="矩阵乘法与线性变换的复合"><a href="#矩阵乘法与线性变换的复合" class="headerlink" title="矩阵乘法与线性变换的复合"></a>矩阵乘法与线性变换的复合</h2><h3 id="a-复合变换"><a href="#a-复合变换" class="headerlink" title="a.复合变换"></a>a.复合变换</h3><p>旋转矩阵 + 剪切矩阵 &#x3D; 复合矩阵</p><h3 id="b-矩阵乘法"><a href="#b-矩阵乘法" class="headerlink" title="b.矩阵乘法"></a>b.矩阵乘法</h3><p>从右往左读</p><h3 id="附注1-三维空间中的线性变换"><a href="#附注1-三维空间中的线性变换" class="headerlink" title="附注1. 三维空间中的线性变换"></a>附注1. 三维空间中的线性变换</h3><p>通过使用三维矩阵来表示这些变换，我们能够将复杂的现实操作转化为简洁的数学形式，这样就能够更轻松地进行分析、计算和控制。</p><p>矩阵表示在连接数字和现实之间扮演着重要的角色，成为描述和控制现实世界运动和变形的重要工具和桥梁。在工程和科学领域，这种方法被广泛应用，帮助我们更好地理解和应用现实世界中的各种形态变化。</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
            <tag> 初学者 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客第一步：将Hexo部署在GitHub上</title>
      <link href="/2024/04/10/deploy-Hexo/"/>
      <url>/2024/04/10/deploy-Hexo/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个快速、简单且强大的静态博客框架，与 GitHub 结合使用可轻松搭建个人博客网站。</p><span id="more"></span><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。其主题，模板也更加丰富多样，更适合创建功能丰富的个人博客或其他类型的静态网站。</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>接下来，我将分享我在GitHub上部署Hexo的过程步骤，并给出其中我遇到的一些困难与解决方法。。</p><h3 id="1-安装Node"><a href="#1-安装Node" class="headerlink" title="1.安装Node"></a>1.安装Node</h3><p>Hexo是一个基于Node.js的静态网站生成器，需要在本地安装Node.js环境，并通过命令行来创建、编译和部署网站。</p><p>下载链接: <a href="https://nodejs.cn/">Node</a></p><h3 id="2-安装Sublime-text"><a href="#2-安装Sublime-text" class="headerlink" title="2.安装Sublime text"></a>2.安装Sublime text</h3><p>这个算是文本编辑器，但功能更加强大，有许多妙用。</p><p>下载链接: <a href="https://www.sublimetext.com/">Sublime text</a></p><h3 id="3-下载Git"><a href="#3-下载Git" class="headerlink" title="3.下载Git"></a>3.下载Git</h3><p>下载链接: <a href="https://git-scm.com/">Git</a></p><h4 id="基本配置Git"><a href="#基本配置Git" class="headerlink" title="基本配置Git"></a>基本配置Git</h4><p>打开gitbush终端输入一下指令（名字邮箱皆与GitHub相关），这将关系到你是否能将仓库推送到GitHub上</p><p>a.配置昵称，邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your.email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>b.生成ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span>         //生成ssh密钥</span><br></pre></td></tr></table></figure><p>c.添加 SSH 公钥到GitHub账户</p><h4 id="使用Git链接远程仓库（后续会使用到）"><a href="#使用Git链接远程仓库（后续会使用到）" class="headerlink" title="使用Git链接远程仓库（后续会使用到）"></a>使用Git链接远程仓库（后续会使用到）</h4><p>需要替换url</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init          //初始化仓库</span><br><span class="line">git remote add origin https://github.com/exampleuser/example.git    </span><br><span class="line">git remote -v     //查看是否关联成功</span><br></pre></td></tr></table></figure><h3 id="4-创建GitHub仓库"><a href="#4-创建GitHub仓库" class="headerlink" title="4.创建GitHub仓库"></a>4.创建GitHub仓库</h3><p>建立一个公共仓库，仓库名：&lt;你的 GitHub 用户名&gt;.github.io<br>eg：Dream-verylively.github.io</p><h3 id="5-配置并使用Hexo"><a href="#5-配置并使用Hexo" class="headerlink" title="5.配置并使用Hexo"></a>5.配置并使用Hexo</h3><p>a.配置hexo</p><p>这个步骤将生成blog文件夹，接下来的诸多操作将围绕这个文件夹进行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g       //安装 Hexo CLI（命令行工具）到全局环境</span><br><span class="line">hexo init blog                //始化 Hexo 博客，创建一个名为 <span class="string">&quot;blog&quot;</span> 的目录，并在其中初始化 Hexo（名字可更改）</span><br><span class="line"><span class="built_in">cd</span> blog                       //进入到刚创建的 <span class="string">&quot;blog&quot;</span> 目录中</span><br><span class="line">npm install                   //npm install</span><br><span class="line">hexo server                   //启动 Hexo 服务器，用于本地预览您的博客</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/zh-cn/">hexo</a></p><p>b.编辑你的 _config.yml</p><p>第一处<br><img src="/2024/04/10/deploy-Hexo/222.png"></p><p>第二处<br><img src="/2024/04/10/deploy-Hexo/22.png"></p><p>c.在博客文件夹下打开终端执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean            //清理 Hexo 生成的静态文件和缓存</span><br><span class="line">hexo g                //使用 Hexo 生成静态文件，将 Markdown 格式的文章转换为 HTML 等静态文件</span><br><span class="line">hexo deploy           //部署生成的静态文件到指定的部署目标（例如 GitHub Pages、FTP 等）</span><br></pre></td></tr></table></figure><h3 id="GithubPages-404问题"><a href="#GithubPages-404问题" class="headerlink" title="GithubPages 404问题"></a>GithubPages 404问题</h3><h4 id="1、github-仓库名称不匹配"><a href="#1、github-仓库名称不匹配" class="headerlink" title="1、github 仓库名称不匹配"></a>1、github 仓库名称不匹配</h4><p>在 github 上面创建的仓库名称没有使用自己的 github 账号名称，例如你的 github 账号名称是 zhanghao，而你创建的仓库名称是 suibian.github.io，这样你是无法访问你的博客网站的。</p><h4 id="2、配置文件错误"><a href="#2、配置文件错误" class="headerlink" title="2、配置文件错误"></a>2、配置文件错误</h4><p>在你的本地博客目录下（我创建的名称是 hexo，注意不是 themes 主题目录下的那个配置文件），有个配置文件 _config.yml，注意观察里边的内容是否符合条件。</p><h4 id="3、分支错误"><a href="#3、分支错误" class="headerlink" title="3、分支错误"></a>3、分支错误</h4><p>注意提交的分支要与GitHub仓库中的默认分支一致</p><h4 id="4、hexo-依赖不全"><a href="#4、hexo-依赖不全" class="headerlink" title="4、hexo 依赖不全"></a>4、hexo 依赖不全</h4><p>检查依赖安装是否有不全的情况，可以使用 npm list 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm list --depth 0</span><br></pre></td></tr></table></figure><p>如果检查有问题，会在控制台提示类似 npm ERR! missing xxxxx。</p><h4 id="5-版本不匹配问题（node与hexo）"><a href="#5-版本不匹配问题（node与hexo）" class="headerlink" title="5.版本不匹配问题（node与hexo）"></a>5.版本不匹配问题（node与hexo）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v           //检查两者的版本</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>看这个：<a href="https://hexo.io/zh-cn/docs/#Node-js-%E7%89%88%E6%9C%AC%E9%99%90%E5%88%B6">版本限制</a></p><h6 id="写在最后：这个过程并不是一帆风顺的，很多时候甚至让我痛苦，但最后我坚持下来了，现在想想尽管痛苦，但是成功了，似乎还不错"><a href="#写在最后：这个过程并不是一帆风顺的，很多时候甚至让我痛苦，但最后我坚持下来了，现在想想尽管痛苦，但是成功了，似乎还不错" class="headerlink" title="写在最后：这个过程并不是一帆风顺的，很多时候甚至让我痛苦，但最后我坚持下来了，现在想想尽管痛苦，但是成功了，似乎还不错"></a>写在最后：这个过程并不是一帆风顺的，很多时候甚至让我痛苦，但最后我坚持下来了，现在想想尽管痛苦，但是成功了，似乎还不错</h6>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
